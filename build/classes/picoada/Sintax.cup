package picoada;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.List;


parser code
{:

    public String Logs="";
    public static int errors = 0;
    public static int token = 0;
    public static Node Arbol;
    public static Symbol found;
    public static LinkedList<String> Errores = new LinkedList<String>();


    public String getLogs(){
        return this.Logs;
    }
    public void Log(String cadena){
        this.Logs += cadena;
    }
    public void Logln(String cadena){
        this.Logs += cadena + "\n";
    }

    public void syntax_error(Symbol s){ 
        Logln("Error Sintáctico RECUPERABLE en la Columna " + (s.left+1) +
        " linea "+(s.right+1)+ ". No se esperaba este componente: " +s.value);
        /*
        System.out.println("Error Sintáctico RECUPERABLE en la Columna " + (s.left+1) +
        " linea "+(s.right+1)+ ". No se esperaba este componente: " +s.value);
        */
        errors++;


        List expected =expected_token_ids();
        if(expected.size()!=0){
            int id;
            Log("Tokens Esperados: ");
            for(int i=0;i<expected.size();i++){
                id = (int) expected.get(i);
                String suffix = i == expected.size() - 1?"":" | ";    
                Log(sym.terminalNames[id]+suffix);
            }
            Logln("");
        }
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Logln("Error síntactico IRRECUPERABLE en la columna " + 
        (s.left+1)+ " linea "+(s.right+1)+". Componente " + s.value + 
        " no reconocido."); 
        /*
        System.out.println("Error síntactico IRRECUPERABLE en la columna " + 
        (s.left+1)+ " linea "+(s.right+1)+". Componente " + s.value + 
        " no reconocido.");
        */
    }

:};

terminal     
    procedure,
    begin,
    end,
    string,
    is,
    For,
    loop,
    While,
    Integer,
    TypeFloat,
    Float,
    TypeInteger,
    TypeBoolean,
    Boolean,
    If,
    then,
    elsif,
    Else,
    Put,
    Put_Line,
    Get,
    not,
    and,
    or,
    in,
    out,
    diff,
    OperadorRelacional,
    Id,
    OperadorSuma,
    OperadorMultiplicacion,
    asignacion,
    DosPuntos,
    PuntoComa,
    AbrirParentesis,
    CerrarParentesis,
    AbrirCorchete,
    CerrarCorchete,
    Function,
    Return,
    When,
    Exit,
    coma,
    AbrirBracket,
    CerrarBracket,
    punto,
    comillas,
    ContString,
    EOL,
    comentario,
    ERROR;

non terminal
    INICIO,
    PROCEDURE,
    DECLARACION_SIMPLE,
    TYPE,
    GLOBAL_START,
    GLOBAL_PROPS,
    PROP_LIST,
    DECLARACION_ASIGNACION,
    EXPRESION,
    LIST_EXPRESION,
    VALORES,
    DATA,
    EXPRESION_SIMPLE,
    TERMINO,
    FACTOR,
    SIGNO,
    NODE_EXPRESION,
    F_EXPRESION,
    D_EXPRESION,
    T_EXPRESION,
    P_EXPRESION,
    DECLARACION_EXPRESION,
    EXPRESION_BOOLEAN,
    F_EXPRESION_BOOLEAN,
    D_EXPRESION_BOOLEAN,
    T_EXPRESION_BOOLEAN,
    P_EXPRESION_BOOLEAN,
    IFSTATE,
    ELSESTATE,
    ELSIFSTATE,
    ASIGNAREXPREION,
    ASIGNACION,
    BODY,
    PROPOSITION,
    PUT,
    GET,
    FUNC,
    TIPO,
    LLAMADA_F,
    PARAMETROS,
    PARAMETRO,
    MULT_IDS,
    CICLOFOR,
    RETORNO,
    CICLOLOOP;


// ----------------------------------------
// PRECEDENCIA DE OPERADORES
// ----------------------------------------

precedence left OperadorSuma;
precedence left OperadorMultiplicacion;
precedence left and;
precedence left or;

start with INICIO;

// ----------------------------------------
// INCIO DE LAS GRAMATICAS 
// ----------------------------------------

INICIO ::= PROCEDURE: b
{:
    Node start = new Node("Start",token);
    parser.token++;
    if(b!=null) start.addHijos(((Node)b).getHijos());
    parser.Arbol = start;
    RESULT = start;
:}
;

// ----------------------------------------
// DECLARACION DE UN PROCEDURE COMO ADA95 COMIENZA
// ----------------------------------------

PROCEDURE ::= procedure Id:i is GLOBAL_START:b begin BODY:bs end Id PuntoComa
{:
    Node node = new Node("Procedure", parser.token++);


    Node id = new Node("Nombre de procedure", parser.token);
    parser.token++;   

    id.addHijo(i.toString(), parser.token);
    parser.token++;    

    node.addHijo(id);

    if(b!=null) node.addHijo((Node)b);
    if(bs!=null) if(bs!=null) node.addHijo((Node)bs);
    RESULT=node;
:}
| procedure Id:i AbrirParentesis PARAMETROS:ptro CerrarParentesis is GLOBAL_START:b begin BODY:bs end Id PuntoComa
{:
    Node node = new Node("Procedure", parser.token++);
    
    Node id = new Node("Nombre de procedure", parser.token);
    parser.token++;   

    id.addHijo(i.toString(), parser.token);
    parser.token++;    

    node.addHijo(id);

    if(b!=null) node.addHijo((Node)b);
    if(ptro!=null) node.addHijo((Node)ptro);
    if(bs!=null) if(bs!=null) node.addHijo((Node)bs);
    RESULT=node;
:}
|error PuntoComa
;


// ----------------------------------------
// FUNCIONES
// ----------------------------------------


// ----------------------------------------
// CREACION DE UNA FUNCION  
// ----------------------------------------

FUNC ::= Function Id:i AbrirParentesis PARAMETROS:ptros CerrarParentesis Return TYPE:t is GLOBAL_START:b begin BODY:bs end Id PuntoComa
{:    
    Node node = new Node("Declaracion de funcion", parser.token);
    parser.token++;

    Node id = new Node("Nombre de funcion", parser.token);
    parser.token++;

    id.addHijo(i.toString(), parser.token);
    parser.token++;

    node.addHijo(id);
    node.addHijo((Node)b);
    if(bs!=null) node.addHijo((Node)bs);
    node.addHijo((Node)t);
    if(ptros != null)
        node.addHijo((Node)ptros);
    RESULT=node;
:}
// | error PuntoComa FUNC
;

// ----------------------------------------
// LLAMADA A FUNCIONES CON O SIN PARAMETROS 
// ----------------------------------------

LLAMADA_F ::= Id:i AbrirParentesis MULT_IDS:ide CerrarParentesis
{:
    Node node = new Node ("Invocacion de la funcion con parametros", parser.token);
    parser.token++;

    Node id = new Node(i.toString(), parser.token);
    parser.token++;
    
    node.addHijo(id);

    node.addHijos(((Node)ide).getHijos());

    RESULT = node;
:}
| Id:i AbrirParentesis CerrarParentesis 
{:
    Node node = new Node ("Invocacion de la funcion sin parametros", parser.token);
    parser.token++;

    Node id = new Node(i.toString(), parser.token);
    parser.token++;
    
    node.addHijo(id);

    RESULT = node;
:}
|error PuntoComa 
;

// ----------------------------------------
// PARAMETROS DE FUNCIONES 
// ----------------------------------------

// ----------------------------------------
// DECLARACION DE PARAMETROS DE UNA FUNCION  
// ----------------------------------------

PARAMETRO::= MULT_IDS:ide DosPuntos TIPO:tpo TYPE:t
{:

    Node node = new Node("Parametro", parser.token);
    parser.token++;

    // Asigno el TYPE
    node.addHijo((Node)t);

    // Asigno MULT_IDS
    node.addHijos(((Node)ide).getHijos());

    parser.token++;

    // Asigno el TIPO
    node.addHijo((Node)tpo);
    

    RESULT = node;

:}
| {::}
;

// -------------------------------------------------
// DECLARACION UNO O MAS PARAMETROS PARA LA FUNCION
// -------------------------------------------------

PARAMETROS ::= PARAMETRO:ptro
{:

   RESULT = ((Node)ptro);

:}
| PARAMETRO:ptro PuntoComa PARAMETROS:ptros  
{:

    Node decl = new Node("Parametros" ,parser.token);
    parser.token++;


    decl.addHijo((Node)ptro);

    if(((Node)ptros).valor.equals("Parametro")){
            decl.addHijo((Node)ptros);
    }else{
        decl.addHijos(((Node)ptros).getHijos());
    }

    RESULT = decl;
:}
| error
;

// ----------------------------------------
// DELCARACION DE VARIABLES 
// ----------------------------------------

// ----------------------------------------
// DECLARACION SIMPLE 
// ----------------------------------------
DECLARACION_SIMPLE ::= MULT_IDS:i DosPuntos TYPE:t PuntoComa
{:
        // Declaro el nodo declaración de variables
        Node decl = new Node("declaracion de variable simple",  parser.token);

        // Asigno el tipo
        decl.addHijo((Node)t);
        
        // Asigno el id
        
        decl.addHijos(((Node)i).getHijos());

        parser.token++;

        RESULT = decl;
:}
;

DECLARACION_EXPRESION ::= MULT_IDS:ide DosPuntos TYPE:t asignacion NODE_EXPRESION:n PuntoComa
{:
        Node decl = new Node("declaracion y asignacion expresión",  parser.token);
     
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Node)t);
        // Asigno el id
        Node id=new Node("id",parser.token);
        parser.token++;
        decl.addHijos(((Node)ide).getHijos());
        parser.token++;
        
        // Asigno el valor
        // Aquí valido si solo se le asigna un id o un número
        Node temp = (Node)n;
        if (temp.getHijos().size() == 3){
            String id1, id2, num;
            num = temp.getHijo(0).getValor();
            id1 = temp.getHijo(1).getValor();
            id2 = temp.getHijo(2).getValor();
            if(id1.equals("#") && id2.equals("#") && (num.equals("Integer") || num.equals("Float"))){
                Node newNode = new Node("valor",temp.getID());
                newNode.addHijo(temp.getHijo(0));
                decl.addHijo(newNode);
                decl.setValor("declaracion y asignacion");
            }else if (id1.equals("#") && id2.equals("#") && num.equals("id")){
                decl.addHijo(temp.getHijo(0));
                decl.setValor("declaracion y asignacion");
            }else{
                decl.addHijo((Node)n);
            }
        }else{
            decl.addHijo((Node)n);
        }

        RESULT = decl;
:};


DECLARACION_ASIGNACION ::=  MULT_IDS:ide DosPuntos TYPE:t asignacion Boolean:b PuntoComa
{:
        Node decl = new Node("declaracion y asignacion",  parser.token);

        // Asigno el tipo
        decl.addHijo((Node)t);

        // Asigno el id
        parser.token++;
        Node id=new Node("id",parser.token);

        parser.token++;

        decl.addHijos(((Node)ide).getHijos());

        // Asigno el valor
        parser.token++;
        Node value =new Node("value",parser.token);

        parser.token++;
        Node tipo = new Node("TypeBoolean",parser.token);

        parser.token++;
        Node valor = new Node(""+b,parser.token);

        parser.token++;
        tipo.addHijo(valor);
        value.addHijo(tipo);
        decl.addHijo(value);

        RESULT = decl;
:}
  
|   MULT_IDS:ide DosPuntos TYPE:t asignacion LLAMADA_F:f PuntoComa
{:
        Node decl = new Node("declaracion y asignacion por funcion",  parser.token);
        parser.token++;

        // Asigno el tipo
        decl.addHijo((Node)t);

        // Asigno el id
        Node id=new Node("id",parser.token);
        parser.token++;

        id.addHijo(new Node(ide.toString(),parser.token));

        decl.addHijos(((Node)ide).getHijos());
        parser.token++;

        // Asigno el valor
        decl.addHijo((Node)f);

        RESULT = decl;
:}
;

// ----------------------------------------
// DECLARACION DE MULTIPLES IDS  
// ----------------------------------------

MULT_IDS ::= Id:ids
{:
    Node decl = new Node("Declaracion" ,parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    decl.addHijo(id);


    id.addHijo(new Node(ids.toString(),parser.token));
    parser.token++;

    RESULT = decl;


:}
| Id:ide coma MULT_IDS:ids  
{:

    Node decl = new Node("Declaracion" ,parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;


    id.addHijo(new Node(ide.toString(),parser.token));
    parser.token++;

    decl.addHijo(id);


    decl.addHijos(((Node)ids).getHijos());


    RESULT = decl;
:}
;

// ----------------------------------------
// ASIGNACIONES Y MODIFICACION DE VARIABLES  
// ----------------------------------------
ASIGNACION ::=  Id:ide asignacion Boolean:b PuntoComa
{:
        Node decl = new Node("asignacion",  parser.token);

        // Asigno el id
        parser.token++;
        Node id=new Node("id",parser.token);

        parser.token++;
        id.addHijo(ide.toString(),parser.token);

        decl.addHijo(id);

        // Asigno el valor
        parser.token++;
        Node value =new Node("value",parser.token);

        parser.token++;
        Node tipo = new Node("TypeBoolean",parser.token);

        parser.token++;
        Node valor = new Node(""+b,parser.token);

        parser.token++;
        tipo.addHijo(valor);
        value.addHijo(tipo);
        decl.addHijo(value);

        RESULT = decl;
:}
  
// a = Sr(); 

|  Id:ide asignacion LLAMADA_F:f PuntoComa
{:
        Node decl = new Node("asignacion por llamada a funcion",  parser.token);
        parser.token++;

        // Asigno el id
        Node id=new Node("id",parser.token);
        parser.token++;
        id.addHijo(new Node(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;

        // Asigno el valor
        decl.addHijo((Node)f);

        RESULT = decl;
:}
;


ASIGNAREXPREION ::= Id:c asignacion NODE_EXPRESION:n PuntoComa
{:
    Node decl = new Node("asignación expresión",  parser.token);
        parser.token++;
        // Asigno el id
        Node id=new Node("id",parser.token);
        parser.token++;
        id.addHijo(new Node(c.toString(),parser.token));
        parser.token++;
        decl.addHijo(id);
        // Asigno el valor
        // Aquí valido si solo se le asigna un id o un número
        Node temp = (Node)n;
        if (temp.getHijos().size() == 3){
            String id1, id2, num;
            num = temp.getHijo(0).getValor();
            id1 = temp.getHijo(1).getValor();
            id2 = temp.getHijo(2).getValor();
            if(id1.equals("#") && id2.equals("#") && ( num.equals("Integer") || num.equals("Float") )){
                Node newNode = new Node("valor",temp.getID());
                newNode.addHijo(temp.getHijo(0));
                decl.addHijo(newNode);
                decl.setValor("asignacion");
            }else if (id1.equals("#") && id2.equals("#") && num.equals("id")){
                decl.addHijo(temp.getHijo(0));
                decl.setValor("asignacion");
            }else{
                decl.addHijo((Node)n);
            }
        }else{
            decl.addHijo((Node)n);
        }


        RESULT = decl;
:};

// ----------------------------------------
// BLOQUE IF  
// ----------------------------------------

IFSTATE::= If EXPRESION_BOOLEAN:e then BODY:b end If PuntoComa
{:
    Node node=new Node("declaración if",parser.token);
    parser.token++;
    Node ife= new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    RESULT=node;
:}
| If EXPRESION_BOOLEAN:e then BODY:b ELSESTATE:el end If PuntoComa
{:
    Node node = new Node("declaración if",parser.token);
    parser.token++;
    Node ife=new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    node.addHijo((Node)el);
    RESULT=node;
:}
| If EXPRESION_BOOLEAN:e then BODY:b ELSIFSTATE:el end If PuntoComa
{:
    Node node = new Node("declaración if",parser.token);
    parser.token++;
    Node ife=new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    node.addHijo((Node)el);
    RESULT=node;
:};

// ----------------------------------------
// ELS, ELSIF  
// ----------------------------------------

ELSESTATE::= Else BODY:b
{:
    Node node = new Node("else",parser.token);
    parser.token++;
    if (b!=null) node.addHijo((Node)b);
    RESULT=node;
:};

ELSIFSTATE::= elsif EXPRESION_BOOLEAN:e then BODY:b ELSIFSTATE:eif
{:
    Node node=new Node("declaración elsif",parser.token);
    parser.token++;
    Node ife= new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    node.addHijo((Node)eif);
    RESULT=node;
:} | elsif EXPRESION_BOOLEAN:e then BODY:b
{:
    Node node=new Node("declaración elsif",parser.token);
    parser.token++;
    Node ife= new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    RESULT=node;
:} | elsif EXPRESION_BOOLEAN:e then BODY:b ELSESTATE:el
{:
    Node node = new Node("declaración elsif",parser.token);
    parser.token++;
    Node ife=new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    node.addHijo((Node)el);
    RESULT=node;
:};

// ----------------------------------------
// BLOQUE LOOP  
// ----------------------------------------

CICLOLOOP ::= loop BODY:b end loop PuntoComa{:
        Node ciclo = new Node("declaración ciclo loop",parser.token);
        parser.token++;
        ciclo.addHijo((Node)b);
        RESULT=ciclo;
:};

// ----------------------------------------
// BLOQUE FOR   
// ----------------------------------------

CICLOFOR ::= For Id:ide in Integer:l punto punto Integer:h loop BODY:b end loop PuntoComa
{:
        Node ciclo = new Node("declaración ciclo for",parser.token);
        parser.token++;

        // Expresión
        Node expr = new Node("expresión for",parser.token);
        parser.token++;

        Node id=new Node("id",parser.token);
        parser.token++;
        id.addHijo(ide.toString(),parser.token);
        parser.token++;

        Node num1=new Node("Integer",parser.token);
        parser.token++;
        num1.addHijo(""+l,parser.token);
        parser.token++;

        Node num2=new Node("Integer",parser.token);
        parser.token++;
        num2.addHijo(""+h,parser.token);
        parser.token++;

        expr.addHijo(id);
        expr.addHijo(num1);
        expr.addHijo(num2);
        ciclo.addHijo(expr);
        ciclo.addHijo((Node)b);

        RESULT= ciclo;
:}
| For Id:ide in Integer:l punto punto Id:h loop BODY:b end loop PuntoComa
{:
        Node ciclo = new Node("declaración ciclo for",parser.token);
        parser.token++;

        // Expresión
        Node expr = new Node("expresión for",parser.token);
        parser.token++;

        Node id=new Node("id",parser.token);
        parser.token++;
        id.addHijo(ide.toString(),parser.token);
        parser.token++;

        Node num1=new Node("Integer",parser.token);
        parser.token++;
        num1.addHijo(""+l,parser.token);
        parser.token++;

        Node num2=new Node("Id",parser.token);
        parser.token++;
        num2.addHijo(""+h,parser.token);
        parser.token++;

        expr.addHijo(id);
        expr.addHijo(num1);
        expr.addHijo(num2);
        ciclo.addHijo(expr);
        ciclo.addHijo((Node)b);

        RESULT= ciclo;
:}
| For Id:ide in Id:l punto punto Integer:h loop BODY:b end loop PuntoComa
{:
        Node ciclo = new Node("declaración ciclo for",parser.token);
        parser.token++;

        // Expresión
        Node expr = new Node("expresión for",parser.token);
        parser.token++;

        Node id=new Node("id",parser.token);
        parser.token++;
        id.addHijo(ide.toString(),parser.token);
        parser.token++;

        Node num1=new Node("Id",parser.token);
        parser.token++;
        num1.addHijo(""+l,parser.token);
        parser.token++;

        Node num2=new Node("Integer",parser.token);
        parser.token++;
        num2.addHijo(""+h,parser.token);
        parser.token++;

        expr.addHijo(id);
        expr.addHijo(num1);
        expr.addHijo(num2);
        ciclo.addHijo(expr);
        ciclo.addHijo((Node)b);

        RESULT= ciclo;
:}
;

// -------------------------------------------
// CUERPO DE FUNCIONES,PROCEDIMIENTOS, BLOQUES 
// -------------------------------------------

BODY::= PROPOSITION:p BODY:b  {:
        Node BODYn = new Node("BODY",  parser.token);
        parser.token++;
        if(p!=null) BODYn.addHijo((Node) p);
        
        if(b!=null){
            BODYn.addHijos(((Node)b).getHijos());
        }

        RESULT = BODYn;
                
:}     
|{:
    Node node=new Node("Body Vacío",parser.token);
    parser.token++;
    RESULT=node;
:} |error BODY
;

// ----------------------------------------
// PROPOSICIONES  / WHILE
// ----------------------------------------

// PROPOSICIONES
PROPOSITION::= While EXPRESION_BOOLEAN:e loop BODY:b end loop PuntoComa
{:
    Node node = new Node("declaración ciclo while",parser.token);
    parser.token++;

    Node whil=new Node("while",parser.token);
    parser.token++;
    node.addHijo(whil);

    node.addHijo((Node)e);

    node.addHijo((Node)b);

    RESULT= node;
:} | CICLOFOR:cf {:
    RESULT = (Node)cf;
:} | CICLOLOOP:cl {:
    RESULT = (Node)cl;
:}
    | ASIGNACION:a
{:
    RESULT = (Node)a;
:}
    | ASIGNAREXPREION:a
{:
    RESULT = (Node)a;
:}
  |   LLAMADA_F:lf PuntoComa
{:
    RESULT=lf;
:}
    |   IFSTATE:ife
{:
    RESULT = ife;
:}  |   PUT:p
{:
    RESULT=p;
:}|   GET:g
{:
    RESULT=g;
:}
| Return RETORNO:r PuntoComa
{:
    Node node = new Node("Return",parser.token);
    parser.token++;

    if(r!=null) node.addHijo((Node)r);

    RESULT = node; 
:}

| Exit When EXPRESION_BOOLEAN:e PuntoComa
{:
    Node node = new Node("Exit when",parser.token);
    parser.token++;

    node.addHijo((Node)e);

    RESULT = node; 
:} 
;

// ----------------------------------------
// RETURNS POSIBLES  
// ----------------------------------------


RETORNO ::=  Boolean:b 
{:
    Node valor = new Node(""+b,parser.token);
    parser.token++;
    RESULT = valor;
:} | NODE_EXPRESION: i
{:
    RESULT = (Node)i; 

:}
| LLAMADA_F :lf
{:
    RESULT = (Node)lf;
:}
| {:

    Node valor = new Node("Return vacio",parser.token);
    parser.token++;

    RESULT = valor; 
:}
;

// ----------------------------------------
// PROPOSICIONES GLOBALES  
// ----------------------------------------

GLOBAL_PROPS ::= DECLARACION_SIMPLE:d
{:
    RESULT = (Node)d;
:} | DECLARACION_ASIGNACION:da
{:
    RESULT = (Node)da;
:} | DECLARACION_EXPRESION:da
{:
    RESULT = (Node)da;
:}
| FUNC:f
{:
    RESULT = (Node)f;
:}
| PROCEDURE:p
{:
    RESULT = (Node)p;
:}

;

// ----------------------------------------
// LISTA DE PROPOSICIONES   
// ----------------------------------------

PROP_LIST ::= GLOBAL_PROPS:d PROP_LIST:pl
{:  
    Node node = new Node("lista de proposiciones", parser.token);
    // parser.token++;
    // Añadir la proposición
    if(d != null) node.addHijo((Node)d);
    if(pl!=null) node.addHijos(((Node)pl).getHijos() );                  
    RESULT = node;
:}
 | {:/*Vacío*/:}

;
    
// --------------------------------------------------------
// INCIO GLOBAL DE EL CUERPO DE PROCEDMIENTO Y FUNCIONES  
// --------------------------------------------------------

GLOBAL_START ::=  PROP_LIST:pl
{:
    Node BODY=new Node("GLOBAL",parser.token);
    parser.token++;

    if(pl!=null){
        BODY.addHijos(((Node)pl).getHijos());
    }

    RESULT= BODY;
:}
| error PROP_LIST
;

// --------------------------------------------------------
// TIPOS DE DATOS  
// --------------------------------------------------------

TYPE::= TypeBoolean
{:
    Node nodo = new Node("TypeBoolean",  parser.token);
    parser.token++;
    RESULT = nodo;
    
:}
    | TypeInteger
{:
    Node nodo = new Node("TypeInteger",  parser.token);
    parser.token++;
    RESULT = nodo;
:}
    | TypeFloat
{:
    Node nodo = new Node("TypeFloat",  parser.token);
    parser.token++;
    RESULT = nodo;
:}
;

// --------------------------------------------------------
// TIPO DE LOS PARAMETROS EN LAS FUNCIONES  
// --------------------------------------------------------

TIPO::= in
{:
    Node nodo = new Node("In",  parser.token);
    parser.token++;
    RESULT = nodo;
    
:}
    | out
{:
    Node nodo = new Node("Out",  parser.token);
    parser.token++;
    RESULT = nodo;
:}
    | in out
{:
    Node nodo = new Node("In Out",  parser.token);
    parser.token++;
    RESULT = nodo;
:}
| {:
    Node nodo = new Node("In Out",  parser.token);
    parser.token++;
    RESULT = nodo;
:}
;

// --------------------------------------------------------
// TIPOS DE DATOS  
// --------------------------------------------------------

DATA::= Boolean
{:
    Node nodo = new Node("boolean",  parser.token);
    parser.token++;
    RESULT = nodo;
    
:}
    | Integer
{:
    Node nodo = new Node("integer",  parser.token);
    parser.token++;
    RESULT = nodo;
:}
    | Float
{:
    Node nodo = new Node("float",  parser.token);
    parser.token++;
    RESULT = nodo;
:}
;


// --------------------------------------------------------
// GRAMATICA ARITMETICA   
// --------------------------------------------------------

EXPRESION_SIMPLE::= TERMINO:t
{:  
    RESULT=t;
:}
    |   SIGNO:s TERMINO:t
{:
    RESULT=(Node)t;
:}
    |   EXPRESION_SIMPLE:exs OperadorSuma:op TERMINO:t
{:
    Node node=new Node("expresión simple",parser.token);
    parser.token++;

    if(exs!=null){
        node.addHijos(((Node)exs).getHijos());
    }
    Node opea_sum=new Node("operador suma/resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;
    node.addHijo(opea_sum);
    node.addHijo((Node)t);
    RESULT=node;
:};

SIGNO ::= OperadorSuma:op
{:
    Node node= new Node("Signo",parser.token);
    parser.token++;

    Node opea_sum=new Node("Operacion Suma/Resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;

    node.addHijo(opea_sum);

    RESULT=node;
:};

TERMINO::= FACTOR:f
{:
    RESULT=f;
:}
    |   TERMINO:t OperadorMultiplicacion:op FACTOR:f
{:
    Node node =new Node("termino",parser.token);
    parser.token++;
    if(t!=null){
        node.addHijos(((Node)t).getHijos());    
    }
    Node opea_mult=new Node("operador multiplicacion/division",parser.token);
    parser.token++;

    opea_mult.addHijo(op.toString(),parser.token++);
    parser.token++;

    node.addHijo(opea_mult);

    node.addHijo((Node)f);

    RESULT=node;
:};

FACTOR::= Id:ide
{:
    Node node=new Node("factor",parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);

    RESULT=node;
:}
    |   Id:ide AbrirParentesis LIST_EXPRESION:list CerrarParentesis
{:
    Node node=new Node("factor",parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
    

    node.addHijo((Node)list);
   
    RESULT=node;
:}
    |   VALORES:v
{:
    RESULT=v;
:}
    |   AbrirParentesis EXPRESION:e CerrarParentesis
{:
    Node node=new Node("factor",parser.token);
    parser.token++;
    node.addHijo((Node)e);
    RESULT=node;
:};


// --------------------------------------------------------
// VALORES UTILIZADOS EN PUTS    
// --------------------------------------------------------

VALORES::= Integer:n
{:
    Node node=new Node("int",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;

    node.addHijo(valor);

    RESULT = node;
:}
    |   Boolean:b
{:
    Node node=new Node("bool",parser.token);
    parser.token++;
    Node valor = new Node(""+b,parser.token);
    parser.token++;
    
    node.addHijo(valor);

    RESULT = node;
:}
    |   Float:l
{:
    Node node=new Node("float",parser.token);
    parser.token++;
    Node valor = new Node(""+l,parser.token);
    parser.token++;
    
    node.addHijo(valor);

    RESULT = node;
:};

EXPRESION::= EXPRESION_SIMPLE:es
{:
    RESULT=es;
:}
    |   EXPRESION_SIMPLE:es OperadorRelacional:op EXPRESION:ex
{:
    Node node =new Node("expresión simple",parser.token);
    parser.token++;
    node.addHijo((Node)es);

    node.addHijo(op.toString(),parser.token);
    parser.token++;

    if(ex!=null){
        node.addHijos(((Node)ex).getHijos());
    }
    
    RESULT=node;
:}
    | ERROR
{:
    Node error=new Node("error expresión",parser.token);
    parser.token++;

    RESULT=error;
:};


LIST_EXPRESION::= EXPRESION:e
{:
    Node node=new Node("Lista de Expresiones",parser.token);
    parser.token++;
    node.addHijo((Node)e);

    RESULT=e;
:} | LIST_EXPRESION:list coma EXPRESION:e
{:
    Node node=new Node("Lista de Expresiones",parser.token);
    parser.token++;

    if(list!=null){
        node.addHijos(((Node)list).getHijos());
    }
    Node coma=new Node(",",parser.token);
    parser.token++;
    node.addHijo(coma);

    node.addHijo((Node)e);
    
    RESULT=node;
:};


// --------------------------------------------------------
// EXPRESIONES BOOLEANAS   
// --------------------------------------------------------

EXPRESION_BOOLEAN ::= T_EXPRESION_BOOLEAN:t P_EXPRESION_BOOLEAN:p
{:
    Node expr = new Node("expresión", parser.token++);
    parser.token++;
    expr.addHijos(((Node)t).getHijos() );
    expr.addHijo((Node)p);
    RESULT = expr;
:};
P_EXPRESION_BOOLEAN ::= or:o T_EXPRESION_BOOLEAN:t P_EXPRESION_BOOLEAN:p
{:
    Node expr = new Node(o.toString(), parser.token++);
    parser.token++;
    expr.addHijos( ((Node)t).getHijos() );
    expr.addHijo((Node)p);
    RESULT = expr;
:} 
    | 
{:
    Node node =  new Node("#", parser.token++);
    parser.token++;
    RESULT = node;
:};
T_EXPRESION_BOOLEAN ::= F_EXPRESION_BOOLEAN:f D_EXPRESION_BOOLEAN:d
{:
    Node expr = new Node("T", parser.token++);
    parser.token++;
    expr.addHijo((Node)f);
    expr.addHijo((Node)d);
    RESULT = expr;
:};
D_EXPRESION_BOOLEAN ::= and:o F_EXPRESION_BOOLEAN:f D_EXPRESION_BOOLEAN:d
{:
    Node expr = new Node(o.toString(), parser.token++);
    parser.token++;
    expr.addHijo((Node)f);
    expr.addHijo((Node)d);
    RESULT = expr;
:} 
    | OperadorRelacional:o F_EXPRESION_BOOLEAN:f D_EXPRESION_BOOLEAN:d
{:
    Node expr = new Node(o.toString(), parser.token++);
    parser.token++;
    expr.addHijo((Node)f);
    expr.addHijo((Node)d);
    RESULT = expr;
:}
    |
{:
    Node node =  new Node("#", parser.token++);
    parser.token++;
    RESULT = node;
:};

F_EXPRESION_BOOLEAN ::= Boolean:n
{:
    Node node=new Node("Boolean",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;
:} | Integer:n
{:
    Node node=new Node("Integer",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;
:} | Float:n
{:
    Node node=new Node("Float",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;
:} 
    | Id:n
{:
    Node node=new Node("id",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;
:} | not:n F_EXPRESION_BOOLEAN:f {:
    Node expr = new Node("not", parser.token++);
    expr.addHijo((Node)f);
    RESULT = expr;
:}
    | AbrirParentesis EXPRESION_BOOLEAN:f CerrarParentesis
{:
    RESULT = (Node)f;
:};

// Expresiones aritméticas
NODE_EXPRESION ::= T_EXPRESION:t P_EXPRESION:p
{:
    Node expr = new Node("expresión", parser.token++);
    parser.token++;
    expr.addHijos( ((Node)t).getHijos() );
    expr.addHijo((Node)p);
    RESULT = expr;
:};

P_EXPRESION ::= OperadorSuma:o T_EXPRESION:t P_EXPRESION:p
{:
    Node expr = new Node(o.toString(), parser.token++);
    parser.token++;
    expr.addHijos( ((Node)t).getHijos() );
    expr.addHijo((Node)p);
    RESULT = expr;
:}
    | 
{:
    Node node =  new Node("#", parser.token++);
    parser.token++;
    RESULT = node;
:};

T_EXPRESION ::= F_EXPRESION:f D_EXPRESION:d
{:
    Node expr = new Node("T", parser.token++);
    parser.token++;
    expr.addHijo((Node)f);
    expr.addHijo((Node)d);
    RESULT = expr;
:};

D_EXPRESION ::= OperadorMultiplicacion:o F_EXPRESION:f D_EXPRESION:d
{:
    Node expr = new Node(o.toString(), parser.token++);
    parser.token++;
    expr.addHijo((Node)f);
    expr.addHijo((Node)d);
    RESULT = expr;
:}
|
{:
    Node node =  new Node("#", parser.token++);
    parser.token++;
    RESULT = node;
:};

F_EXPRESION ::= Integer:n
{:
    Node node=new Node("Integer",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;
:} | Float:n
{:
    Node node=new Node("Float",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;
:} 
    | Id:n
{:
    Node node=new Node("id",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;
:} 
    | AbrirParentesis NODE_EXPRESION:f CerrarParentesis
{:
    RESULT = (Node)f;
:};

// --------------------------------------------------------
// FUNCIONES PUT   
// --------------------------------------------------------

PUT::= Put AbrirParentesis Id:ide CerrarParentesis PuntoComa
{:
    Node node=new Node("PUT",parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    RESULT=node;
:}
    |   Put AbrirParentesis VALORES:v CerrarParentesis PuntoComa
{:
    Node node=new Node("PUT",parser.token);
    parser.token++;

    node.addHijo((Node)v);
 
    RESULT=node;
:}
    |   Put_Line AbrirParentesis Id:ide CerrarParentesis PuntoComa
{:
    Node node=new Node("PUT_LINE",parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    RESULT=node;
:}
    |   Put_Line AbrirParentesis VALORES:v CerrarParentesis PuntoComa
{:
    Node node=new Node("PUT_LINE",parser.token);
    parser.token++;

    node.addHijo((Node)v);

    RESULT=node;
:};

// --------------------------------------------------------
// FUNCION GET   
// --------------------------------------------------------

GET::= Get AbrirParentesis Id:ide CerrarParentesis PuntoComa
{:
    Node node=new Node("GET",parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    RESULT=node;
:};