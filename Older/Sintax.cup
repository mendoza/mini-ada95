package picoada;

import java_cup.runtime.Symbol;
import java.util.LinkedList;


parser code
{:

    private Symbol s;
    public static Node raiz;
    public static Symbol found;
    public static LinkedList<String> Errores = new LinkedList<String>();
    
    public Symbol getS(){
        return this.s;
    }
    
    public void report_error(String errorBody, Object info){
        found = (Symbol)info;
      	//Sintax.Errores.add("Se encontro Report_Error: " + found.value+"\n");
        //Sintax.Errores.add(" Descripcion:\n");
    }

    public void report_fatal_error(String errorBody, Object info){ 
        //error = "Errores no Recuperables \n";
        found = (Symbol)info;
	Sintax.Errores.add("Se encontró error fatal: " + found.value + " en línea: " + (found.right + 1) + " , columna: " + (found.left + 1));
	//Sintax.Errores.add(" Descripcion:\n");
    }

    public static void Module_Error(){
        switch(found.sym){
            case sym.Id:
            case sym.EOL:
            case sym.end:
                Sintax.Errores.add("Error de sintaxis en sentencia Module " + " , linea: " + (found.right + 1) + " , columna: " + (found.left + 1));
                break;
            default:
                Sintax.Errores.add("Error en el Module \n");
                break;
        }
    }
:};

terminal     procedure,
    begin,
    end,
    is,
    For,
    loop,
    While,
    TypeFloat,
    TypeInteger,
    TypeBoolean,
    If,
    then,
    elsif,
    Else,
    put,
    not,
    and,
    or,
    OperadorRelacional,
    Id,
    OperadorSuma,
    OperadorMultiplicacion,
    asignacion,
    DosPuntos,
    PuntoComa,
    AbrirParentesis,
    CerrarParentesis,
    AbrirCorchete,
    CerrarCorchete,
    coma,
    AbrirBracket,
    CerrarBracket,
    punto,
    comillas,
    ContString,
    EOL,
    comentario,
    ERROR;

non terminal INICIO;

precedence left OperadorSuma;
precedence left OperadorMultiplicacion;

start with INICIO;
INICIO ::= procedure If is EOL end Id
;
