/* The following code was generated by JFlex 1.4.3 on 9/18/21 3:27 PM */

package picoada;

import java_cup.runtime.Symbol;
import static picoada.Tokens.*;
import java.util.LinkedList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/18/21 3:27 PM from the specification file
 * <tt>/Users/jeancasoto/CompiladoresI/mini-ada95/src/picoada/adaCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int COMMENT_LINE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 49,  0,  0, 23,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    13,  0, 34,  0,  0,  0,  0,  0, 17, 18, 30, 31, 14, 32,  4, 25, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 15, 16, 19, 24, 19,  0, 
     0,  2, 44,  2,  2,  2,  9, 47,  2, 43,  2,  2, 46,  2,  2,  2, 
    45,  2,  2,  2,  5,  2,  2,  2,  2,  2,  2, 20, 33, 21,  0,  3, 
     0, 10, 37, 36, 29,  8, 40, 38, 42, 39,  2,  2, 11,  2, 26, 27, 
    35,  2,  6, 12, 28,  7,  2, 41, 48,  2,  2,  0, 22,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\6\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\13"+
    "\1\16\3\3\1\16\2\17\1\1\11\3\1\5\1\20"+
    "\1\5\2\0\1\3\1\0\11\3\1\21\1\22\1\3"+
    "\1\23\1\3\1\24\1\0\2\3\1\25\1\26\1\27"+
    "\7\3\1\30\1\0\1\31\2\0\3\3\1\32\3\3"+
    "\1\33\1\3\1\34\1\3\2\0\3\3\1\35\4\3"+
    "\1\36\1\37\1\2\2\3\1\0\2\3\1\0\1\40"+
    "\1\3\1\41\1\3\1\42\1\3\1\43\1\44\3\0"+
    "\3\3\1\45\3\3\1\0\2\3\1\46\1\47\2\0"+
    "\1\50\1\3\1\51\1\3\1\52\2\3\1\0\1\53"+
    "\6\0\5\3\1\0\2\3\1\54\1\55\2\3\1\56"+
    "\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\226\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\226\0\u028a"+
    "\0\226\0\226\0\226\0\u02bc\0\226\0\226\0\226\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\226\0\226\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa"+
    "\0\226\0\226\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\226\0\226\0\u0898\0\372\0\u08ca\0\226\0\u08fc\0\u092e"+
    "\0\u0960\0\372\0\372\0\372\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\226\0\u0af0\0\u0640\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u0bea\0\372\0\u0c1c\0\u0c4e\0\u0c80\0\372"+
    "\0\u0cb2\0\372\0\u0ce4\0\u0d16\0\u03e8\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\372\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\372\0\u0af0"+
    "\0\u0b22\0\u0ed8\0\u0f0a\0\u0f3c\0\u0b54\0\u0f6e\0\372\0\u0fa0"+
    "\0\372\0\u0fd2\0\372\0\u1004\0\372\0\372\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\372\0\u1162\0\u1194\0\u11c6"+
    "\0\u11f8\0\u122a\0\u125c\0\372\0\372\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\372\0\u1356\0\372\0\u1388\0\u13ba\0\u13ec\0\372"+
    "\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\372\0\372"+
    "\0\u16da\0\u170c\0\372\0\u0b54\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\1\6"+
    "\1\12\1\13\1\14\1\15\1\6\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\4\1\16"+
    "\1\27\1\30\1\31\1\32\1\33\1\6\1\34\1\35"+
    "\1\36\1\37\1\4\1\40\1\6\1\41\1\6\1\42"+
    "\1\43\1\44\1\6\1\45\1\46\1\47\1\6\1\50"+
    "\1\6\1\16\26\51\2\52\31\51\1\52\41\51\1\53"+
    "\17\51\64\0\1\5\1\0\1\54\1\55\56\0\1\56"+
    "\1\6\1\57\1\0\10\6\15\0\4\6\5\0\16\6"+
    "\2\0\1\56\1\6\1\57\1\0\1\6\1\60\6\6"+
    "\15\0\4\6\5\0\16\6\2\0\1\56\1\6\1\57"+
    "\1\0\3\6\1\61\4\6\15\0\4\6\5\0\16\6"+
    "\2\0\1\56\1\6\1\57\1\0\6\6\1\62\1\6"+
    "\15\0\1\63\3\6\5\0\15\6\1\64\2\0\1\56"+
    "\1\6\1\57\1\0\5\6\1\65\1\66\1\6\15\0"+
    "\4\6\5\0\16\6\2\0\1\56\1\6\1\57\1\0"+
    "\10\6\15\0\1\67\3\6\5\0\16\6\2\0\1\56"+
    "\1\6\1\57\1\0\10\6\15\0\1\6\1\70\2\6"+
    "\5\0\16\6\16\0\1\16\11\0\1\16\31\0\1\16"+
    "\30\0\1\71\61\0\1\27\61\0\1\72\32\0\1\56"+
    "\1\6\1\57\1\0\10\6\15\0\1\6\1\73\2\6"+
    "\5\0\16\6\2\0\1\56\1\6\1\57\1\0\1\6"+
    "\1\74\6\6\15\0\4\6\5\0\16\6\2\0\1\56"+
    "\1\6\1\57\1\0\10\6\15\0\4\6\5\0\7\6"+
    "\1\75\6\6\41\0\1\76\63\0\1\77\20\0\1\56"+
    "\1\6\1\57\1\0\1\6\1\100\6\6\15\0\4\6"+
    "\5\0\16\6\2\0\1\56\1\6\1\57\1\0\3\6"+
    "\1\101\4\6\15\0\4\6\5\0\16\6\2\0\1\56"+
    "\1\6\1\57\1\0\7\6\1\102\15\0\1\103\3\6"+
    "\5\0\5\6\1\104\10\6\2\0\1\56\1\6\1\57"+
    "\1\0\2\6\1\105\5\6\15\0\1\6\1\106\2\6"+
    "\5\0\16\6\2\0\1\56\1\6\1\57\1\0\10\6"+
    "\15\0\4\6\5\0\7\6\1\107\6\6\2\0\1\56"+
    "\1\6\1\57\1\0\10\6\15\0\1\110\3\6\5\0"+
    "\16\6\2\0\1\56\1\6\1\57\1\0\10\6\15\0"+
    "\1\6\1\111\2\6\5\0\16\6\2\0\1\56\1\6"+
    "\1\57\1\0\2\6\1\112\5\6\15\0\4\6\5\0"+
    "\16\6\2\0\1\56\1\6\1\57\1\0\3\6\1\113"+
    "\4\6\15\0\4\6\5\0\16\6\43\0\1\114\20\0"+
    "\1\115\61\0\1\116\61\0\1\56\61\0\1\117\1\120"+
    "\2\0\10\120\15\0\4\120\5\0\16\120\2\0\1\56"+
    "\1\6\1\57\1\0\2\6\1\121\5\6\15\0\4\6"+
    "\5\0\16\6\2\0\1\56\1\6\1\57\1\0\10\6"+
    "\15\0\2\6\1\122\1\6\5\0\16\6\2\0\1\56"+
    "\1\6\1\57\1\0\7\6\1\123\15\0\4\6\5\0"+
    "\16\6\2\0\1\56\1\6\1\57\1\0\10\6\15\0"+
    "\3\6\1\124\5\0\16\6\2\0\1\56\1\6\1\57"+
    "\1\0\10\6\15\0\4\6\5\0\4\6\1\125\11\6"+
    "\2\0\1\56\1\6\1\57\1\0\6\6\1\126\1\6"+
    "\15\0\4\6\5\0\16\6\2\0\1\56\1\6\1\57"+
    "\1\0\10\6\15\0\1\6\1\127\2\6\5\0\16\6"+
    "\2\0\1\56\1\6\1\57\1\0\10\6\15\0\3\6"+
    "\1\130\5\0\16\6\2\0\1\56\1\6\1\57\1\0"+
    "\10\6\15\0\1\6\1\131\2\6\5\0\16\6\2\0"+
    "\1\56\1\6\1\57\1\0\10\6\15\0\2\6\1\132"+
    "\1\6\5\0\16\6\2\0\1\56\1\6\1\57\1\0"+
    "\3\6\1\133\4\6\15\0\4\6\5\0\16\6\3\0"+
    "\1\134\2\0\10\134\15\0\4\134\3\0\1\135\1\0"+
    "\16\134\2\0\1\56\1\6\1\57\1\0\10\6\15\0"+
    "\1\6\1\136\2\6\5\0\16\6\2\0\1\56\1\6"+
    "\1\57\1\0\10\6\15\0\4\6\5\0\3\6\1\137"+
    "\12\6\2\0\1\56\1\6\1\57\1\0\10\6\15\0"+
    "\1\140\3\6\5\0\16\6\2\0\1\56\1\6\1\57"+
    "\1\0\1\6\1\141\6\6\15\0\4\6\5\0\16\6"+
    "\2\0\1\56\1\6\1\57\1\0\3\6\1\142\4\6"+
    "\15\0\4\6\5\0\4\6\1\143\11\6\2\0\1\56"+
    "\1\6\1\57\1\0\10\6\15\0\2\6\1\144\1\6"+
    "\5\0\16\6\2\0\1\56\1\6\1\57\1\0\10\6"+
    "\15\0\1\6\1\145\2\6\5\0\16\6\2\0\1\56"+
    "\1\6\1\57\1\0\10\6\15\0\2\6\1\146\1\6"+
    "\5\0\16\6\2\0\1\56\1\6\1\57\1\0\10\6"+
    "\15\0\2\6\1\147\1\6\5\0\16\6\2\0\1\150"+
    "\1\0\1\54\57\0\1\151\1\152\1\153\1\0\10\152"+
    "\15\0\4\152\5\0\16\152\2\0\1\154\1\155\1\156"+
    "\1\0\10\155\15\0\4\155\5\0\16\155\2\0\1\56"+
    "\1\6\1\57\1\0\3\6\1\157\4\6\15\0\4\6"+
    "\5\0\16\6\2\0\1\56\1\6\1\57\1\0\2\6"+
    "\1\160\5\6\15\0\4\6\5\0\16\6\2\0\1\56"+
    "\1\6\1\57\1\0\3\6\1\161\4\6\15\0\4\6"+
    "\5\0\4\6\1\162\11\6\2\0\1\56\1\6\1\57"+
    "\1\0\10\6\15\0\2\6\1\163\1\6\5\0\16\6"+
    "\2\0\1\56\1\6\1\57\1\0\7\6\1\121\15\0"+
    "\4\6\5\0\16\6\2\0\1\56\1\6\1\57\1\0"+
    "\5\6\1\164\2\6\15\0\4\6\5\0\16\6\2\0"+
    "\1\56\1\6\1\57\1\0\10\6\15\0\4\6\5\0"+
    "\1\165\15\6\2\0\1\56\1\6\1\57\1\0\10\6"+
    "\15\0\1\166\3\6\5\0\16\6\2\0\1\167\1\134"+
    "\1\170\1\0\10\134\15\0\4\134\3\0\1\171\1\0"+
    "\16\134\2\0\1\56\1\6\1\57\1\0\10\6\15\0"+
    "\4\6\5\0\1\6\1\172\14\6\2\0\1\56\1\6"+
    "\1\57\1\0\10\6\15\0\4\6\5\0\4\6\1\173"+
    "\11\6\2\0\1\56\1\6\1\57\1\0\10\6\15\0"+
    "\4\6\5\0\1\6\1\174\14\6\2\0\1\56\1\6"+
    "\1\57\1\0\10\6\15\0\1\175\3\6\5\0\16\6"+
    "\2\0\1\56\1\6\1\57\1\0\6\6\1\176\1\6"+
    "\15\0\4\6\5\0\16\6\2\0\1\56\1\6\1\57"+
    "\1\0\3\6\1\177\4\6\15\0\4\6\5\0\16\6"+
    "\2\0\1\56\1\6\1\57\1\0\6\6\1\200\1\6"+
    "\15\0\4\6\5\0\16\6\2\0\1\56\1\6\1\201"+
    "\1\0\10\6\15\0\4\6\5\0\16\6\2\0\1\56"+
    "\1\152\1\153\1\0\10\152\15\0\4\152\5\0\16\152"+
    "\2\0\1\117\61\0\1\154\1\202\1\156\1\0\10\202"+
    "\15\0\4\202\5\0\16\202\3\0\1\120\2\0\10\120"+
    "\15\0\4\120\5\0\16\120\2\0\1\56\1\6\1\57"+
    "\1\0\1\6\1\203\6\6\15\0\4\6\5\0\16\6"+
    "\2\0\1\56\1\6\1\57\1\0\10\6\15\0\4\6"+
    "\5\0\5\6\1\204\10\6\2\0\1\56\1\6\1\57"+
    "\1\0\10\6\15\0\2\6\1\205\1\6\5\0\16\6"+
    "\2\0\1\167\37\0\1\171\21\0\1\206\1\207\2\0"+
    "\10\207\15\0\4\207\5\0\16\207\43\0\1\210\20\0"+
    "\1\56\1\6\1\57\1\0\3\6\1\211\4\6\15\0"+
    "\4\6\5\0\16\6\2\0\1\56\1\6\1\57\1\0"+
    "\10\6\15\0\1\212\3\6\5\0\16\6\2\0\1\56"+
    "\1\6\1\57\1\0\10\6\15\0\2\6\1\213\1\6"+
    "\5\0\16\6\2\0\1\56\1\6\1\57\1\0\3\6"+
    "\1\214\4\6\15\0\4\6\5\0\16\6\2\0\1\56"+
    "\1\6\1\57\1\0\10\6\15\0\4\6\5\0\3\6"+
    "\1\215\12\6\2\0\1\56\1\6\1\57\1\0\3\6"+
    "\1\216\4\6\15\0\4\6\5\0\16\6\2\0\1\117"+
    "\1\120\2\0\10\120\15\0\4\120\5\0\13\120\1\217"+
    "\2\120\3\0\1\202\2\0\10\202\15\0\4\202\5\0"+
    "\16\202\2\0\1\56\1\6\1\57\1\0\10\6\15\0"+
    "\1\220\3\6\5\0\16\6\2\0\1\221\1\222\1\223"+
    "\1\0\10\222\15\0\4\222\5\0\16\222\2\0\1\224"+
    "\1\225\1\226\1\0\10\225\15\0\4\225\5\0\16\225"+
    "\42\0\1\171\21\0\1\56\1\6\1\57\1\0\10\6"+
    "\15\0\3\6\1\227\5\0\16\6\2\0\1\56\1\6"+
    "\1\57\1\0\10\6\15\0\4\6\5\0\4\6\1\230"+
    "\11\6\2\0\1\56\1\6\1\57\1\0\3\6\1\231"+
    "\4\6\15\0\4\6\5\0\16\6\2\0\1\56\1\6"+
    "\1\57\1\0\5\6\1\232\2\6\15\0\4\6\5\0"+
    "\16\6\2\0\1\154\1\155\1\156\1\0\10\155\15\0"+
    "\4\155\5\0\4\155\1\233\11\155\2\0\1\221\1\222"+
    "\1\223\1\0\10\222\15\0\4\222\3\0\1\171\1\0"+
    "\16\222\2\0\1\167\1\222\1\223\1\0\10\222\15\0"+
    "\4\222\3\0\1\171\1\0\16\222\2\0\1\206\61\0"+
    "\1\224\1\234\1\226\1\0\10\234\15\0\4\234\3\0"+
    "\1\171\1\0\16\234\2\0\1\224\1\225\1\226\1\0"+
    "\10\225\15\0\4\225\3\0\1\171\1\0\16\225\3\0"+
    "\1\207\2\0\10\207\15\0\4\207\5\0\16\207\2\0"+
    "\1\56\1\6\1\57\1\0\2\6\1\235\5\6\15\0"+
    "\4\6\5\0\16\6\2\0\1\56\1\6\1\57\1\0"+
    "\10\6\15\0\1\6\1\236\2\6\5\0\16\6\2\0"+
    "\1\56\1\6\1\57\1\0\1\6\1\237\6\6\15\0"+
    "\4\6\5\0\16\6\2\0\1\56\1\6\1\57\1\0"+
    "\10\6\15\0\1\240\3\6\5\0\16\6\2\0\1\154"+
    "\1\155\1\156\1\0\10\155\15\0\1\241\3\155\5\0"+
    "\16\155\3\0\1\234\2\0\10\234\15\0\4\234\3\0"+
    "\1\171\1\0\16\234\2\0\1\56\1\6\1\57\1\0"+
    "\1\6\1\242\6\6\15\0\4\6\5\0\16\6\2\0"+
    "\1\56\1\6\1\57\1\0\10\6\15\0\1\243\3\6"+
    "\5\0\16\6\2\0\1\154\1\155\1\156\1\0\3\155"+
    "\1\244\4\155\15\0\4\155\5\0\16\155\2\0\1\56"+
    "\1\6\1\57\1\0\3\6\1\245\4\6\15\0\4\6"+
    "\5\0\16\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\7\1\1\11\1\1\3\11"+
    "\1\1\3\11\4\1\2\11\13\1\2\11\1\1\2\0"+
    "\1\1\1\0\11\1\2\11\3\1\1\11\1\0\14\1"+
    "\1\11\1\0\1\1\2\0\13\1\2\0\15\1\1\0"+
    "\2\1\1\0\10\1\3\0\7\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\6\0\5\1\1\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    static int errors =0;
    String Logs = "";

    String comment = "";
    String cadena = "";

    public String getLogs(){
        return this.Logs;
    }

    public void Log(String cadena){
        this.Logs += cadena + "\n" ;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return new Symbol(sym.in,yycolumn,yyline,yytext());
          }
        case 49: break;
        case 24: 
          { yybegin(YYINITIAL); return new Symbol (sym.string, yycolumn, yyline, yytext());
          }
        case 50: break;
        case 32: 
          { return new Symbol (sym.Boolean, yycolumn, yyline, yytext());
          }
        case 51: break;
        case 35: 
          { return new Symbol (sym.loop, yycolumn, yyline, yytext());
          }
        case 52: break;
        case 29: 
          { return new Symbol (sym.For, yycolumn, yyline, yytext());
          }
        case 53: break;
        case 13: 
          { return new Symbol (sym.CerrarBracket, yycolumn, yyline, yytext());
          }
        case 54: break;
        case 46: 
          { return new Symbol(sym.Function,yycolumn,yyline,yytext());
          }
        case 55: break;
        case 2: 
          { return new Symbol (sym.Integer, yycolumn, yyline, yytext());
          }
        case 56: break;
        case 36: 
          { return new Symbol (sym.then, yycolumn, yyline, yytext());
          }
        case 57: break;
        case 33: 
          { return new Symbol (sym.Else, yycolumn, yyline, yytext());
          }
        case 58: break;
        case 10: 
          { return new Symbol (sym.CerrarParentesis, yycolumn, yyline, yytext());
          }
        case 59: break;
        case 43: 
          { return new Symbol(sym.Return,yycolumn,yyline,yytext());
          }
        case 60: break;
        case 45: 
          { return new Symbol (sym.TypeBoolean, yycolumn, yyline, yytext());
          }
        case 61: break;
        case 19: 
          { return new Symbol (sym.or, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 34: 
          { return new Symbol(sym.Exit,yycolumn,yyline,yytext());
          }
        case 63: break;
        case 44: 
          { return new Symbol (sym.TypeInteger, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 39: 
          { return new Symbol (sym.TypeFloat, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 31: 
          { return new Symbol(sym.Get,yycolumn,yyline,yytext());
          }
        case 66: break;
        case 37: 
          { return new Symbol(sym.When,yycolumn,yyline,yytext());
          }
        case 67: break;
        case 16: 
          { yybegin(YYINITIAL); return new Symbol (sym.comentario, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 26: 
          { return new Symbol (sym.end, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 8: 
          { return new Symbol (sym.PuntoComa, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 41: 
          { return new Symbol (sym.begin, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 40: 
          { yybegin(STRING);
          }
        case 72: break;
        case 15: 
          { return new Symbol (sym.OperadorSuma, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 4: 
          { return new Symbol (sym.punto, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 28: 
          { return new Symbol (sym.not, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 6: 
          { return new Symbol (sym.coma, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 21: 
          { return new Symbol (sym.is, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 14: 
          { return new Symbol (sym.OperadorMultiplicacion, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 42: 
          { return new Symbol (sym.While, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 3: 
          { return new Symbol (sym.Id, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 9: 
          { return new Symbol (sym.AbrirParentesis, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 30: 
          { return new Symbol (sym.Put, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 48: 
          { return new Symbol (sym.procedure, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 12: 
          { return new Symbol (sym.AbrirBracket, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 25: 
          { return new Symbol (sym.Float, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 7: 
          { return new Symbol (sym.DosPuntos, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 17: 
          { return new Symbol (sym.asignacion, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 47: 
          { return new Symbol (sym.Put_Line, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 18: 
          { return new Symbol (sym.diff, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 23: 
          { return new Symbol (sym.If, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 38: 
          { return new Symbol (sym.elsif, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 1: 
          { Log("Falla en lexico, char o variable no aceptada: " +yytext()+" Linea: "+(yyline + 1)+ ", Columna: "+(yycolumn+1));
							errors++;
          }
        case 92: break;
        case 20: 
          { yybegin(COMMENT_LINE); comment = "";
          }
        case 93: break;
        case 27: 
          { return new Symbol (sym.and, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 5: 
          { 
          }
        case 95: break;
        case 11: 
          { return new Symbol (sym.OperadorRelacional, yycolumn, yyline, yytext());
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
