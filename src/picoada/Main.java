package picoada;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jeancasoto
 */
import java.awt.Color;
import java.awt.Desktop;
import java.io.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

public class Main extends javax.swing.JFrame {

    String adaCode = "";

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SideBar = new javax.swing.JPanel();
        FileIconPanel = new javax.swing.JPanel();
        loadButtonLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        FileIconPanel1 = new javax.swing.JPanel();
        buildButtonLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        FileIconPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        FileIconPanel6 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        FileIconPanel7 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        TopBar = new javax.swing.JPanel();
        FileIconPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        FileIconPanel5 = new javax.swing.JPanel();
        runButtonLabel = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        panelEditorCodigo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        editorCodigo = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree2 = new javax.swing.JTree();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        consola = new javax.swing.JTextArea();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        centeredPanel = new javax.swing.JPanel();

        jLabel2.setText("jLabel2fghfdghfgdhfdgh");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setMaximumSize(new java.awt.Dimension(46, 12));
        jScrollPane4.setViewportView(jTree1);

        jLabel75.setFont(new java.awt.Font("Andale Mono", 1, 24)); // NOI18N
        jLabel75.setText("Abstract Syntax Tree");

        jLabel76.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/flow.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jLabel75, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel76)
                        .addGap(0, 233, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel76)
                    .addComponent(jLabel75))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDialog1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDialog1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        jLabel3.setFont(new java.awt.Font("Andale Mono", 1, 24)); // NOI18N

        SideBar.setBackground(new java.awt.Color(255, 255, 255));
        SideBar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));

        FileIconPanel.setBackground(new java.awt.Color(255, 255, 255));

        loadButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/file.png"))); // NOI18N
        loadButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadButtonLabelMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Andale Mono", 1, 12)); // NOI18N
        jLabel1.setText("Load File");

        javax.swing.GroupLayout FileIconPanelLayout = new javax.swing.GroupLayout(FileIconPanel);
        FileIconPanel.setLayout(FileIconPanelLayout);
        FileIconPanelLayout.setHorizontalGroup(
            FileIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileIconPanelLayout.createSequentialGroup()
                .addGroup(FileIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FileIconPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(FileIconPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(loadButtonLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FileIconPanelLayout.setVerticalGroup(
            FileIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileIconPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadButtonLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        FileIconPanel1.setBackground(new java.awt.Color(255, 255, 255));

        buildButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/hammer.png"))); // NOI18N
        buildButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buildButtonLabelMouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Andale Mono", 1, 12)); // NOI18N
        jLabel5.setText("Build ");

        javax.swing.GroupLayout FileIconPanel1Layout = new javax.swing.GroupLayout(FileIconPanel1);
        FileIconPanel1.setLayout(FileIconPanel1Layout);
        FileIconPanel1Layout.setHorizontalGroup(
            FileIconPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FileIconPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(FileIconPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buildButtonLabel)
                    .addComponent(jLabel5)))
        );
        FileIconPanel1Layout.setVerticalGroup(
            FileIconPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileIconPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buildButtonLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FileIconPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/logout.png"))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Andale Mono", 1, 12)); // NOI18N
        jLabel7.setText("Exit");

        javax.swing.GroupLayout FileIconPanel2Layout = new javax.swing.GroupLayout(FileIconPanel2);
        FileIconPanel2.setLayout(FileIconPanel2Layout);
        FileIconPanel2Layout.setHorizontalGroup(
            FileIconPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FileIconPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(FileIconPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addContainerGap())
        );
        FileIconPanel2Layout.setVerticalGroup(
            FileIconPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileIconPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addContainerGap())
        );

        FileIconPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/flow.png"))); // NOI18N
        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel17MouseClicked(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Andale Mono", 1, 12)); // NOI18N
        jLabel18.setText("Tree ");

        javax.swing.GroupLayout FileIconPanel6Layout = new javax.swing.GroupLayout(FileIconPanel6);
        FileIconPanel6.setLayout(FileIconPanel6Layout);
        FileIconPanel6Layout.setHorizontalGroup(
            FileIconPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileIconPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(FileIconPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17))
                .addContainerGap())
        );
        FileIconPanel6Layout.setVerticalGroup(
            FileIconPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileIconPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FileIconPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/info.png"))); // NOI18N

        jLabel20.setFont(new java.awt.Font("Andale Mono", 1, 12)); // NOI18N
        jLabel20.setText("Help");

        javax.swing.GroupLayout FileIconPanel7Layout = new javax.swing.GroupLayout(FileIconPanel7);
        FileIconPanel7.setLayout(FileIconPanel7Layout);
        FileIconPanel7Layout.setHorizontalGroup(
            FileIconPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileIconPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(FileIconPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        FileIconPanel7Layout.setVerticalGroup(
            FileIconPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileIconPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout SideBarLayout = new javax.swing.GroupLayout(SideBar);
        SideBar.setLayout(SideBarLayout);
        SideBarLayout.setHorizontalGroup(
            SideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SideBarLayout.createSequentialGroup()
                .addGroup(SideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FileIconPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(FileIconPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, SideBarLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(FileIconPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(SideBarLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(SideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(FileIconPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FileIconPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SideBarLayout.setVerticalGroup(
            SideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SideBarLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(FileIconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(FileIconPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(FileIconPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(FileIconPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(FileIconPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );

        TopBar.setBackground(new java.awt.Color(255, 255, 255));
        TopBar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));

        FileIconPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/codingTool.png"))); // NOI18N

        jLabel11.setFont(new java.awt.Font("Andale Mono", 1, 18)); // NOI18N
        jLabel11.setText("Mini ADA 95 Compiler");

        javax.swing.GroupLayout FileIconPanel4Layout = new javax.swing.GroupLayout(FileIconPanel4);
        FileIconPanel4.setLayout(FileIconPanel4Layout);
        FileIconPanel4Layout.setHorizontalGroup(
            FileIconPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileIconPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FileIconPanel4Layout.setVerticalGroup(
            FileIconPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileIconPanel4Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(FileIconPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FileIconPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addContainerGap())))
        );

        jLabel12.setFont(new java.awt.Font("Andale Mono", 1, 14)); // NOI18N
        jLabel12.setText("Por: Jean Carlo Soto");

        jLabel13.setFont(new java.awt.Font("Andale Mono", 1, 14)); // NOI18N
        jLabel13.setText("David Mendoza");

        FileIconPanel5.setBackground(new java.awt.Color(255, 255, 255));

        runButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/play-button.png"))); // NOI18N
        runButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runButtonLabelMouseClicked(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Andale Mono", 1, 24)); // NOI18N
        jLabel15.setText("RUN ");

        javax.swing.GroupLayout FileIconPanel5Layout = new javax.swing.GroupLayout(FileIconPanel5);
        FileIconPanel5.setLayout(FileIconPanel5Layout);
        FileIconPanel5Layout.setHorizontalGroup(
            FileIconPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileIconPanel5Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runButtonLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FileIconPanel5Layout.setVerticalGroup(
            FileIconPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FileIconPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(FileIconPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(runButtonLabel)
                    .addComponent(jLabel15))
                .addGap(26, 26, 26))
        );

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/github.png"))); // NOI18N
        jLabel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel16MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout TopBarLayout = new javax.swing.GroupLayout(TopBar);
        TopBar.setLayout(TopBarLayout);
        TopBarLayout.setHorizontalGroup(
            TopBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TopBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FileIconPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(FileIconPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(342, 342, 342)
                .addGroup(TopBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TopBarLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(12, 12, 12)))
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addGap(37, 37, 37))
        );
        TopBarLayout.setVerticalGroup(
            TopBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TopBarLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(FileIconPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
            .addGroup(TopBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TopBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(FileIconPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(TopBarLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13))
                    .addComponent(jLabel16))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        panelEditorCodigo.setBackground(new java.awt.Color(255, 255, 255));
        panelEditorCodigo.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));

        editorCodigo.setColumns(20);
        editorCodigo.setRows(5);
        editorCodigo.setTabSize(2);
        editorCodigo.setBorder(null);
        jScrollPane1.setViewportView(editorCodigo);

        jLabel8.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 153));
        jLabel8.setText("1");

        jLabel9.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 153));
        jLabel9.setText("2");

        jLabel14.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 153, 153));
        jLabel14.setText("4");

        jLabel27.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(0, 153, 153));
        jLabel27.setText("3");

        jLabel28.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 153, 153));
        jLabel28.setText("5");

        jLabel29.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(0, 153, 153));
        jLabel29.setText("6");

        jLabel30.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(0, 153, 153));
        jLabel30.setText("7");

        jLabel31.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(0, 153, 153));
        jLabel31.setText("8");

        jLabel32.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(0, 153, 153));
        jLabel32.setText("9");

        jLabel33.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(0, 153, 153));
        jLabel33.setText("10");

        jLabel34.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(0, 153, 153));
        jLabel34.setText("11");

        jLabel35.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(0, 153, 153));
        jLabel35.setText("12");

        jLabel36.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(0, 153, 153));
        jLabel36.setText("13");

        jLabel37.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(0, 153, 153));
        jLabel37.setText("14");

        jLabel38.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(0, 153, 153));
        jLabel38.setText("15");

        jLabel39.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(0, 153, 153));
        jLabel39.setText("16");

        jLabel40.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(0, 153, 153));
        jLabel40.setText("17");

        jLabel41.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(0, 153, 153));
        jLabel41.setText("18");

        jLabel42.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(0, 153, 153));
        jLabel42.setText("19");

        jLabel43.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(0, 153, 153));
        jLabel43.setText("20");

        jLabel44.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(0, 153, 153));
        jLabel44.setText("21");

        jLabel45.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(0, 153, 153));
        jLabel45.setText("22");

        jLabel46.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(0, 153, 153));
        jLabel46.setText("23");

        jLabel47.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(0, 153, 153));
        jLabel47.setText("24");

        jLabel48.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(0, 153, 153));
        jLabel48.setText("25");

        jLabel49.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(0, 153, 153));
        jLabel49.setText("26");

        jLabel50.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(0, 153, 153));
        jLabel50.setText("27");

        jLabel51.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel51.setForeground(new java.awt.Color(0, 153, 153));
        jLabel51.setText("28");

        jLabel52.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(0, 153, 153));
        jLabel52.setText("29");

        jLabel53.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel53.setForeground(new java.awt.Color(0, 153, 153));
        jLabel53.setText("30");

        jLabel54.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel54.setForeground(new java.awt.Color(0, 153, 153));
        jLabel54.setText("31");

        jLabel55.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(0, 153, 153));
        jLabel55.setText("32");

        jLabel56.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel56.setForeground(new java.awt.Color(0, 153, 153));
        jLabel56.setText("33");

        jLabel57.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel57.setForeground(new java.awt.Color(0, 153, 153));
        jLabel57.setText("34");

        jLabel58.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(0, 153, 153));
        jLabel58.setText("35");

        jLabel59.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel59.setForeground(new java.awt.Color(0, 153, 153));
        jLabel59.setText("36");

        jLabel60.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel60.setForeground(new java.awt.Color(0, 153, 153));
        jLabel60.setText("37");

        jLabel61.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(0, 153, 153));
        jLabel61.setText("38");

        jLabel62.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel62.setForeground(new java.awt.Color(0, 153, 153));
        jLabel62.setText("39");

        jLabel63.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel63.setForeground(new java.awt.Color(0, 153, 153));
        jLabel63.setText("40");

        jLabel64.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel64.setForeground(new java.awt.Color(0, 153, 153));
        jLabel64.setText("41");

        jLabel65.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel65.setForeground(new java.awt.Color(0, 153, 153));
        jLabel65.setText("42");

        jLabel66.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel66.setForeground(new java.awt.Color(0, 153, 153));
        jLabel66.setText("43");

        jLabel67.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel67.setForeground(new java.awt.Color(0, 153, 153));
        jLabel67.setText("44");

        jLabel68.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel68.setForeground(new java.awt.Color(0, 153, 153));
        jLabel68.setText("45");

        jLabel69.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel69.setForeground(new java.awt.Color(0, 153, 153));
        jLabel69.setText("46");

        jLabel70.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel70.setForeground(new java.awt.Color(0, 153, 153));
        jLabel70.setText("47");

        jLabel71.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel71.setForeground(new java.awt.Color(0, 153, 153));
        jLabel71.setText("51");

        jLabel72.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel72.setForeground(new java.awt.Color(0, 153, 153));
        jLabel72.setText("50");

        jLabel73.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel73.setForeground(new java.awt.Color(0, 153, 153));
        jLabel73.setText("49");

        jLabel74.setFont(new java.awt.Font("Andale Mono", 1, 11)); // NOI18N
        jLabel74.setForeground(new java.awt.Color(0, 153, 153));
        jLabel74.setText("48");

        javax.swing.GroupLayout panelEditorCodigoLayout = new javax.swing.GroupLayout(panelEditorCodigo);
        panelEditorCodigo.setLayout(panelEditorCodigoLayout);
        panelEditorCodigoLayout.setHorizontalGroup(
            panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditorCodigoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel33)
                                    .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel37)
                                    .addComponent(jLabel38, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel39)
                                    .addComponent(jLabel40, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel41)
                                    .addComponent(jLabel42, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel43)
                                    .addComponent(jLabel44, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel45)
                                    .addComponent(jLabel46, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel47)
                                    .addComponent(jLabel48, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel49)
                                    .addComponent(jLabel50, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel51)
                                    .addComponent(jLabel52, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel53)
                                    .addComponent(jLabel54, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel55)
                                    .addComponent(jLabel56, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel57)
                            .addComponent(jLabel58, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel59)
                            .addComponent(jLabel60, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel62)
                                    .addComponent(jLabel63, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel64)
                                    .addComponent(jLabel65, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel66)
                                    .addComponent(jLabel67, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel68)
                            .addComponent(jLabel69, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel70))
                    .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel74, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel73)
                            .addComponent(jLabel72, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel71)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelEditorCodigoLayout.setVerticalGroup(
            panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditorCodigoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEditorCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEditorCodigoLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel9)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel27)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel14)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel28)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel29)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel30)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel31)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel32)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel33)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel34)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel35)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel36)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel37)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel38)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel39)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel40)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel41)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel42)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel43)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel44)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel45)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel46)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel47)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel48)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel49)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel50)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel51)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel52)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel53)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel54)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel55)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel56)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel57)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel58)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel59)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel60)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel61)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel62)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel63)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel64)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel65)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel66)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel67)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel68)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel69)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel70)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel74)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel73)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel72)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel71)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));

        jScrollPane5.setViewportView(jList1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Cuadruplos", jPanel4);

        jScrollPane2.setViewportView(jTree2);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Tabla de Símbolos", jPanel5);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane6.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("MIPs", jPanel6);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));

        consola.setBackground(new java.awt.Color(204, 204, 204));
        consola.setColumns(20);
        consola.setRows(5);
        consola.setBorder(null);
        jScrollPane3.setViewportView(consola);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
        );

        jLabel21.setFont(new java.awt.Font("Andale Mono", 1, 24)); // NOI18N
        jLabel21.setText("Consola");

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/terminal-windows.png"))); // NOI18N

        jLabel23.setFont(new java.awt.Font("Andale Mono", 1, 24)); // NOI18N
        jLabel23.setText("Cuadruplos");

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/puzzle.png"))); // NOI18N

        jLabel25.setFont(new java.awt.Font("Andale Mono", 1, 24)); // NOI18N
        jLabel25.setText("Editor de código");

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picoada/Iconos/coding.png"))); // NOI18N

        javax.swing.GroupLayout centeredPanelLayout = new javax.swing.GroupLayout(centeredPanel);
        centeredPanel.setLayout(centeredPanelLayout);
        centeredPanelLayout.setHorizontalGroup(
            centeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        centeredPanelLayout.setVerticalGroup(
            centeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1512, 1512, 1512)
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TopBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SideBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel26))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(panelEditorCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(centeredPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel22))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel24))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(TopBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SideBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel26))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(panelEditorCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(238, 238, 238)
                                        .addComponent(centeredPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runButtonLabelMouseClicked
        // TODO add your handling code here:
        try {
            analizarLexico();
            analizadorSintactico();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_runButtonLabelMouseClicked

    private void buildButtonLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buildButtonLabelMouseClicked
        // TODO add your handling code here:    
        // System.out.println("Click al boton Build");
        try {
            Build.main(new String[0]);
            JOptionPane.showMessageDialog(centeredPanel, "Generación de archivos exitosa.", "Alert", JOptionPane.WARNING_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(centeredPanel, "Error en la generación de archivos.", "Error", JOptionPane.WARNING_MESSAGE);
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_buildButtonLabelMouseClicked

    private void loadButtonLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadButtonLabelMouseClicked
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File archivo = new File(chooser.getSelectedFile().getAbsolutePath());
        try {
            String loadString = new String(Files.readAllBytes(archivo.toPath()));
            editorCodigo.setText(loadString);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_loadButtonLabelMouseClicked

    private void jLabel16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MouseClicked
        // TODO add your handling code here:        
        Desktop d = Desktop.getDesktop();
        try {
            d.browse(new URI("http://github.com/mendoza/mini-ada95"));
        } catch (URISyntaxException | IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jLabel16MouseClicked

    private void jLabel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseClicked
        // TODO add your handling code here:
        if (Sintax.Arbol != null) {
            DefaultMutableTreeNode nodo = TransformToJTree(Sintax.Arbol);
            DefaultTreeModel TreeModel = (DefaultTreeModel) jTree1.getModel();
            TreeModel.setRoot(nodo);
            jTree1.setModel(TreeModel);
            jDialog1.setTitle("Árbol de sintaxis abstracta");
            jDialog1.setVisible(true);
            jDialog1.setModal(true);
            jDialog1.pack();
            jDialog1.setLocationRelativeTo(centeredPanel);
        } else {
            JOptionPane.showMessageDialog(centeredPanel, "Error parece que el Arbol esta vacio.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jLabel17MouseClicked

    // <editor-fold defaultstate="collapsed" desc="Compiladores I">   
    private void analizadorSintactico() throws IOException {

        String codigo = editorCodigo.getText();
        LexerCup lexer = new picoada.LexerCup(new StringReader(codigo));
        Sintax s = new Sintax(lexer);

        try {
            Sintax.errors = 0;
            Sintax.token = 0;
            semanticErrors = 0;
            logs = "";
            Sintax.Arbol = new Node();
            LexerCup.errors = 0;
            s.parse();
            consola.setText("");
            if (Sintax.errors == 0 && LexerCup.errors == 0) {
                analizarSemantico(Sintax.Arbol);
                if (semanticErrors == 0) {
                    cont_temp = 0;
                    cont_etiq = 0;
                    cuadruplo.clear();
                    intermedio(Sintax.Arbol);
                    DefaultMutableTreeNode dmtn = convertirAmbtios(ambitos);
                    DefaultTreeModel dtm = new DefaultTreeModel(dmtn);
                    jTree2.setModel(dtm);
                    codigoFinal();
                    DefaultListModel demoList = new DefaultListModel();
                    for (Cuadruplo cuadruplo1 : cuadruplo) {
                        demoList.addElement(cuadruplo1);
                    }
                    jList1.setModel(demoList);
                    consola.setText("Análisis finalizado exitosamente");
                    consola.setForeground(new Color(25, 111, 61));
                } else {
                    consola.setText("Se encontraron %d errores semanticos\n%s".formatted(semanticErrors, logs));
                    consola.setForeground(Color.red);
                }
            } else {
                String syntaxLogs = s.getLogs();
                String lexerLogs = lexer.getLogs();
                consola.setText("Se encontraron " + LexerCup.errors + " errores lexicos\n" + lexerLogs + "Se encontraron " + Sintax.errors + " errores sintacticos\n" + syntaxLogs);
                consola.setForeground(Color.red);
            }

        } catch (Exception ex) {
            ex.printStackTrace();

        }
    }

    private void analizarLexico() throws IOException {
        try {
            String expr = (String) editorCodigo.getText();
            Lexer lexer = new Lexer(new StringReader(expr));
            String resultado = "";
            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    return;
                }
                switch (tokens) {
                    case ERROR:
                        resultado += "Simbolo no definido\n";
                        break;
                    case EOL:
                        resultado += "< " + tokens + " >" + "\n";
                        break;
                    case procedure:
                    case Integer:
                    case begin:
                    case end:
                    case is:
                    case Exit:
                    case When:
                    case Function:
                    case Return:
                    case For:
                    case loop:
                    case While:
                    case TypeFloat:
                    case Float:
                    case TypeInteger:
                    case TypeBoolean:
                    case Boolean:
                    case If:
                    case then:
                    case elsif:
                    case Else:
                    case Put:
                    case Put_Line:
                    case Get:
                    case not:
                    case diff:
                    case and:
                    case or:
                    case in:
                    case out:
                    case OperadorRelacional:
                    case Id:
                    case OperadorSuma:
                    case OperadorMultiplicacion:
                    case asignacion:
                    case DosPuntos:
                    case PuntoComa:
                    case AbrirParentesis:
                    case CerrarParentesis:
                    case AbrirCorchete:
                    case CerrarCorchete:
                    case coma:
                    case AbrirBracket:
                    case CerrarBracket:
                    case punto:
                    case string:
                        resultado += "< " + tokens + ", " + lexer.lexema + " >" + "\n";
                        break;
                    case comentario:
                        resultado += "< " + tokens + ", " + lexer.lexema + " >" + "\n";
                        break;
                    default:
                        resultado += "Token: " + tokens + "\n";
                        break;
                }
            }
        } catch (IOException e) {

        }
    }

    private DefaultMutableTreeNode TransformToJTree(Node Arbol) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(Arbol.toString());
        if (!Arbol.esHoja()) {
            for (Node hijo : Arbol.getHijos()) {
                nodo.add(TransformToJTree(hijo));
            }
        }
        return nodo;
    }
// </editor-fold>

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    private void analizarSemantico(Node Arbol) {
        if (!Arbol.esHoja()) {
            ambitos = CrearAmbito(Arbol, null);
        }
    }

    public static String generarTemp() {
        return "#t" + cont_temp++;
    }

    public static String nuevaEtiqueta() {
        cont_etiq++;
        return "etiq" + cont_etiq;
    }

    public static String intermedioAritmetica(Node expresion, Ambitos ambito, boolean isBool) {
        String E1 = expresion.getHijo(0).valor;
        boolean isExpr = false;
        if (E1.equals("expresión")) {
            isExpr = true;
            E1 = intermedioAritmetica(expresion.getHijo(0), ambitos, isBool);

        }
        String ret = "";
        String temp = "";
        if (E1.equals("id")) {
            String id = expresion.getHijo(0).getHijo(0).valor;
            Object valor = ambito.getValor(id);
            if (valor != null) {
                E1 = ((Valor) valor).valor;
                E1 = E1.replace("Type", "");
            } else {
                Log("Error: Identificador %s no declarado".formatted(id));
                return "Unknown";
            }
        }
        String E2 = expresion.getHijo(1).valor;
        String prefix = isBool && !(E2.equals("and") || E2
                .equals("or")) ? "IF" : "";

        String E3 = "#";
        if (expresion.getHijos().size() == 3) {
            E3 = expresion.getHijo(2).valor;
        }

        if (E2.equals("#") && E3.equals("#")) {
            return isExpr ? E1 : expresion.getHijo(0).getHijo(0).valor;
        }

        if (!E2.equals("#")) {
            temp = generarTemp();
            String avers1 = intermedioAritmetica(expresion.getHijo(1), ambito, isBool);
            String arg1 = isExpr ? E1 : expresion.getHijo(0).getHijo(0).valor;
            cuadruplo.add(new Cuadruplo(prefix + E2, arg1, avers1, isBool ? ambito_siguiente : temp));
            ret = temp;
        }

        if (!E3.equals("#")) {
            Boolean gen = false;
            if (temp.equals("")) {
                temp = generarTemp();
                gen = true;
            }
            String avers2 = intermedioAritmetica(expresion.getHijo(2), ambito, isBool);
            ret = temp;
            String arg1 = gen ? (isExpr ? E1 : expresion.getHijo(0).getHijo(0).valor) : temp;
            String result = gen ? temp : generarTemp();
            cuadruplo.add(new Cuadruplo(prefix + E3, arg1, avers2, isBool ? ambito_siguiente : result));
            ret = result;
        }

        return ret;
    }

    public static void intermedio(Node body) {
        Node node = body;
        if (node != null) {
            switch (node.getValor()) {
                case "Procedure": {
                    String id = node.getHijo(0).getHijo(0).getValor();
                    cuadruplo.add(new Cuadruplo("Proc", id, "", ""));
                    intermedio(node.getHijo(1));
                    intermedio(node.getHijo(2));
                    cuadruplo.add(new Cuadruplo("ProcEnd", "", "", ""));

                    break;
                }
                case "Declaracion de funcion": {
                    String id = node.getHijo(0).getHijo(0).getValor();
                    ArrayList<String> Params = new ArrayList<>();
                    for (Node hijo : node.getHijos()) {
                        switch (hijo.valor) {
                            case "Parametro":
                            case "Parametros": {
                                if (hijo.valor.equals("Parametros")) {
                                    for (Node parametro : hijo.getHijos()) {
                                        String type = parametro.getHijo(0).valor;
                                        for (Node nieto : parametro.getHijos()) {
                                            if (nieto.valor.equals("id")) {
                                                Params.add(type);
                                            }
                                        }
                                    }
                                } else {
                                    String type = hijo.getHijo(0).valor;
                                    for (Node nieto : hijo.getHijos()) {
                                        if (nieto.valor.equals("id")) {
                                            Params.add(type);
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                    String parametros = "";
                    for (int i = 0; i < Params.size(); i++) {
                        String Param = Params.get(i);
                        parametros += Param + ((i == Params.size() - 1) ? "" : "X");
                    }
                    if (Params.isEmpty()) {
                        parametros = "TypeNull";
                    }
                    cuadruplo.add(new Cuadruplo("Func", "%s|%s".formatted(id, parametros), "", ""));
                    for (Node n : node.getHijos()) {
                        intermedio(n);
                    }
                    cuadruplo.add(new Cuadruplo("FuncEnd", "", "", ""));
                    break;
                }
                case "Invocacion de la funcion con parametros": {
                    String id_param;
                    String id = node.getHijo(0).getValor();
                    for (Node parametro : node.getHijos()) {
                        if (parametro.getValor().equals("id")) {
                            id_param = parametro.getHijo(0).getValor();
                            cuadruplo.add(new Cuadruplo("Param", id_param, "", ""));
                        }
                    }
                    cuadruplo.add(new Cuadruplo("Call", id, "", ""));
                    break;
                }
                case "Invocacion de la funcion sin parametros": {
                    String id = node.getHijo(0).getValor();
                    cuadruplo.add(new Cuadruplo("Call", id, "", ""));
                    break;
                }
                case "Start": {
                    node.setComienzo("start");
                    cuadruplo.add(new Cuadruplo("Proc", "start", "", ""));
                    for (Node hijo : node.getHijos()) {
                        intermedio(hijo);
                    }
                    cuadruplo.add(new Cuadruplo("ProcEnd", "", "", ""));
                    break;
                }
                case "GLOBAL": {
                    for (Node hijo : node.getHijos()) {
                        intermedio(hijo);
                    }
                    break;
                }
                case "BODY": {
                    node.setSiguiente(nuevaEtiqueta());
                    for (Node hijo : node.getHijos()) {
                        if (hijo.getValor().equals("declaración ciclo for") || hijo.getValor().equals("declaración ciclo while") || hijo.getValor().equals("declaración ciclo loop")) {
                            cuadruplo.add(new Cuadruplo("ETIQ", node.getSiguiente(), "", ""));
                            node.setSiguiente(nuevaEtiqueta());
                        }
                        intermedio(hijo);
                    }
                    break;
                }
                case "declaración elsif":
                case "declaración if": {
                    node.getHijo(1).setVerdadero(nuevaEtiqueta());
                    ambito_siguiente = node.getHijo(1).getVerdadero();
                    String finalTemp = intermedioAritmetica(node.getHijo(1), ambitos, true);
                    node.getHijo(1).setFalso(node.padre.getSiguiente());
                    if (node.getHijos().size() == 4) {
                        intermedio(node.getHijo(3));
                    } else {
                        cuadruplo.add(new Cuadruplo("GOTO", node.getHijo(1).getFalso(), "", ""));
                    }
                    cuadruplo.add(new Cuadruplo("ETIQ", node.getHijo(1).getVerdadero(), "", ""));
                    intermedio(node.getHijo(2));
                    if (!node.valor.equals("declaración elsif")) {
                        cuadruplo.add(new Cuadruplo("GOTO", node.getHijo(1).getFalso(), "", ""));
                        cuadruplo.add(new Cuadruplo("ETIQ", node.getHijo(1).getFalso(), "", ""));
                    }
                    break;
                }
                case "else": {
                    cuadruplo.add(new Cuadruplo("ETIQ", nuevaEtiqueta(), "", ""));
                    intermedio(node.getHijo(0));
                    break;
                }
                case "declaración ciclo while": {
                    node.setComienzo(nuevaEtiqueta());
                    node.getHijo(1).setVerdadero(nuevaEtiqueta());
                    ambito_siguiente = node.getHijo(1).getVerdadero();
                    node.getHijo(1).setFalso(node.padre.getSiguiente());
                    cuadruplo.add(new Cuadruplo("ETIQ", node.getComienzo(), "", ""));
                    String finalTemp = intermedioAritmetica(node.getHijo(1), ambitos, true);

                    cuadruplo.add(new Cuadruplo("GOTO", node.getHijo(1).getFalso(), "", ""));
                    cuadruplo.add(new Cuadruplo("ETIQ", node.getHijo(1).getVerdadero(), "", ""));

                    intermedio(node.getHijo(2));
                    cuadruplo.add(new Cuadruplo("GOTO", node.getComienzo(), "", ""));
                    cuadruplo.add(new Cuadruplo("ETIQ", node.getHijo(1).getFalso(), "", ""));
                    break;
                }
                case "Exit when": {
                    node.getHijo(0).setFalso(node.padre.padre.padre.getSiguiente());
                    ambito_siguiente = node.getHijo(0).getFalso();
                    String finalTemp = intermedioAritmetica(node.getHijo(0), ambitos, true);
                    break;
                }
                case "declaración ciclo loop": {
                    node.setComienzo(nuevaEtiqueta());
                    cuadruplo.add(new Cuadruplo("ETIQ", node.getComienzo(), "", ""));
                    intermedio(node.getHijo(0));
                    cuadruplo.add(new Cuadruplo("GOTO", node.getComienzo(), "", ""));
                    cuadruplo.add(new Cuadruplo("ETIQ", node.padre.getSiguiente(), "", ""));
                    break;
                }
                case "expresión for": {
                    String etiquetaVerdadera = nuevaEtiqueta();
                    node.padre.setVerdadero(etiquetaVerdadera);
                    node.padre.setFalso(node.padre.padre.getSiguiente());
                    // LA ASIGNACIÓN X = 0
                    String id = node.getHijo(0).getHijo(0).getValor();
                    String valor = node.getHijo(1).getHijo(0).getValor();
                    cuadruplo.add(new Cuadruplo(":=", valor, "", id));
                    // === 
                    cuadruplo.add(new Cuadruplo("ETIQ", node.padre.getComienzo(), "", ""));
                    // LA CONDICIÓN X < Z
                    String num = node.getHijo(2).getHijo(0).getValor();
                    cuadruplo.add(new Cuadruplo("IF<=", id, num, node.padre.getVerdadero()));
                    cuadruplo.add(new Cuadruplo("GOTO", node.padre.padre.getSiguiente(), "", ""));
                    // ===
                    String etiqueta = nuevaEtiqueta();
                    cuadruplo.add(new Cuadruplo("ETIQ", etiqueta, "", ""));
                    // LA SUMA  X = X + 1
                    String temp = generarTemp();
                    cuadruplo.add(new Cuadruplo("+", id, "1", temp));
                    cuadruplo.add(new Cuadruplo(":=", temp, "", id));
                    // ===
                    cuadruplo.add(new Cuadruplo("GOTO", node.padre.getComienzo(), "", ""));
                    cuadruplo.add(new Cuadruplo("ETIQ", node.padre.getVerdadero(), "", ""));
                    intermedio(node.padre.getHijo(1));
                    cuadruplo.add(new Cuadruplo("GOTO", etiqueta, "", ""));
                    cuadruplo.add(new Cuadruplo("ETIQ", node.padre.padre.getSiguiente(), "", ""));
                    break;
                }
                case "declaración ciclo for": {
                    node.setComienzo(nuevaEtiqueta());
                    intermedio(node.getHijo(0));
                    break;
                }
                case "declaracion y asignacion": {
                    String valor = "";
                    for (int i = 1; i < node.getHijos().size(); i++) {
                        if (i != node.getHijos().size() - 1) {
                            String id = node.getHijo(i).getHijo(0).getValor();
                            if (!node.getHijo(node.getHijos().size() - 1).valor.equals("id")) {
                                valor = node.getHijo(node.getHijos().size() - 1).getHijo(0).getHijo(0).getValor();
                            } else {
                                valor = node.getHijo(node.getHijos().size() - 1).getHijo(0).getValor();
                            }
                            cuadruplo.add(new Cuadruplo(":=", valor, "", id));
                        }
                    }
                    break;
                }
                case "declaracion y asignacion expresión": {
                    String finalTemp = intermedioAritmetica(node.getHijo(node.getHijos().size() - 1), ambitos, false);
                    for (int i = 0; i < node.getHijos().size(); i++) {
                        if (node.getHijo(i).valor.equals("id")) {
                            String id = node.getHijo(i).getHijo(0).getValor();
                            cuadruplo.add(new Cuadruplo(":=", finalTemp, "", id));
                        }
                    }
                    break;
                }

                case "declaracion de variable simple": {
                    for (int i = 0; i < node.getHijos().size(); i++) {
                        if (node.getHijo(i).valor.equals("id")) {
                            String id_principal = node.getHijo(i).getHijo(0).getValor();
                            cuadruplo.add(new Cuadruplo(":=", "0", "", id_principal));
                        }
                    }
                    break;
                }
                case "asignacion": {
                    String id_principal = node.getHijo(0).getHijo(0).getValor();
                    String value = node.getHijo(1).getHijo(0).getHijo(0).getValor();
                    cuadruplo.add(new Cuadruplo(":=", value, "", id_principal));
                    break;
                }
                case "asignación expresión": {
                    String idtest = node.getHijo(0).getHijo(0).getValor();
                    String finalTempTest = intermedioAritmetica(node.getHijo(1), ambitos, false);
                    cuadruplo.add(new Cuadruplo(":=", finalTempTest, "", idtest));
                    break;
                }
                case "GET": {
                    String id_principal = node.getHijo(0).getHijo(0).getValor();
                    cuadruplo.add(new Cuadruplo("GET", id_principal, "", ""));
                    break;
                }
                case "PUT": {
                    String id_principal = node.getHijo(0).getHijo(0).getValor();
                    cuadruplo.add(new Cuadruplo("PUT", id_principal, "", ""));
                    break;
                }
                case "PUT_LINE": {
                    String id_principal = node.getHijo(0).getHijo(0).getValor();
                    cuadruplo.add(new Cuadruplo("PUT_LINE", id_principal, "", ""));
                    break;
                }
                case "Return": {
                    String id_principal = node.getHijo(0).getValor();
                    if (id_principal.equals("expresion")) {
                        id_principal = intermedioAritmetica(node.getHijo(0).getHijo(0), ambitos, false);
                    } else if (id_principal.equals("Integer") || id_principal.equals("Float") || id_principal.equals("Boolean")) {
                        id_principal = node.getHijo(0).getHijo(0).valor;
                    }
                    cuadruplo.add(new Cuadruplo("Ret", id_principal, "", ""));
                    break;
                }
                default:
            }
        }

    }

    // Funcion para revisar la existencia de las funciones en una llamada "Tabla de funciones"
    public static Funcion getFuncion(String key, Ambitos ambito) {

        Object fu = null;

        for (Object f : ambito.TablaFunciones.values()) {
            Funcion F = (Funcion) f;
            String id = "%s|%s".formatted(F.id, F.type.substring(0, F.type.indexOf("->")));

            if (key.equals(id)) {
                return F;
            }

        }

        for (Ambitos a : ambito.getHijos()) {
            Object aux = getFuncion(key, a);

            if (aux != null) {
                return (Funcion) aux;
            }
        }

        return (Funcion) fu;
    }

    // Funcion para revisar la existencia de las variable en una la tabla de simbolos 
    public static DefaultMutableTreeNode convertirAmbtios(Ambitos ambito) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(ambito.NombreAmbito);
        DefaultMutableTreeNode variables = new DefaultMutableTreeNode("Variables");
        DefaultMutableTreeNode funciones = new DefaultMutableTreeNode("Funciones");
        DefaultMutableTreeNode hijos = new DefaultMutableTreeNode("Hijos");

        for (Object value : ambito.TablaSimbolos.values()) {
            variables.add(new DefaultMutableTreeNode(((Valor) value)));
        }
        if (variables.getChildCount() != 0) {
            nodo.add(variables);
        }

        for (Object value : ambito.TablaFunciones.values()) {
            funciones.add(new DefaultMutableTreeNode(((Funcion) value)));
        }
        if (funciones.getChildCount() != 0) {
            nodo.add(funciones);
        }

        if (!ambito.esHoja()) {
            for (Ambitos hijo : ambito.getHijos()) {
                DefaultMutableTreeNode t = convertirAmbtios(hijo);
                if (t.getChildCount() != 0) {
                    hijos.add(t);
                }
            }
        }
        if (hijos.getChildCount() != 0) {
            nodo.add(hijos);
        }
        return nodo;
    }

    public static Valor getVar(String key, Ambitos ambito) {
        for (Object v : ambito.TablaSimbolos.values()) {
            Valor V = (Valor) v;
            if (V.id.equals(key)) {
                return V;
            }

        }

        for (Ambitos a : ambito.getHijos()) {
            Object aux = getVar(key, a);
            if (aux != null) {
                return (Valor) aux;
            }
        }

        return null;
    }

    public static boolean isParameter(String variable, String ambito) {
        Valor v = getVar(variable, ambitos);
        return !v.tipo.equals("");
    }

    public static String devuelveTemp() {
        // La pila de temporales ocupados contiene los valores de t# que fueron reservados para cargar alguna variable como registro
        String popPilaTemp = "";
        if (!tempOcupados.isEmpty()) {
            popPilaTemp = tempOcupados.get(tempOcupados.size() - 1) + "";
            tempOcupados.remove(tempOcupados.size() - 1);

        }
        return popPilaTemp;

    }

    public static String devuelveRes() {
        // La pila matematica contiene los valores de t# que fueron reservados para guardar un resultado de una expresion 
        String popPilaMat = "";
        if (!pilaMatematica.isEmpty()) {
            popPilaMat = pilaMatematica.get(pilaMatematica.size() - 1) + "";
            pilaMatematica.remove(pilaMatematica.size() - 1);
        }
        return popPilaMat;
    }

    public static int auxDisponible() {
        int aux = 0;
        Boolean encontro = false;
        while (encontro == false) {
            for (int i = 0; i < 7; i++) {
                if (!tempOcupados.contains(i) && !pilaMatematica.contains(i)) {
                    aux = i;
                    encontro = true;
                    break;
                }
            }
        }
        return aux;
    }

    public static boolean isVariable(String var, Ambitos ambito) {
        Object aux1 = ambito.TablaSimbolos.get(var);

        if (aux1 != null) {
            return true;
        }

        for (Ambitos a : ambito.getHijos()) {
            Object aux = a.TablaSimbolos.get(var);
            if (aux != null) {
                return true;
            } else {
                return isVariable(var, a);
            }
        }
        return false;
    }

    public static int getOffsetVariable(String key) {
        Valor V = getVar(key, ambitos);
        return V.offset;
    }

    public static int getParamIndex(String key, String varkey) {
        Funcion f = getFuncion(key, ambitos);
        return f.getParams().indexOf(varkey);
    }

    public static void codigoFinal() {
        ArrayList<Temporal> temporales = new ArrayList();
        ArrayList<Temporal> parametros = new ArrayList();

        int arg = 0;
        int contA = 0;
        for (int i = 0; i < 10; i++) {
            temporales.add(new Temporal(i, "", false));
        }
        String codigoFinal = "";
        codigoFinal += ".data\n";
        codigoFinal += " newline: .asciiz \"\\n\"\n";
        codigoFinal += "   .text\n"
                + "   .globl main\n";

        for (Cuadruplo currentCuadruplo : cuadruplo) {
            switch (currentCuadruplo.getOperador()) {
                case "Proc": {
                    ambito_siguiente = currentCuadruplo.getArgumento1();
                    parametros.clear();
                    if (currentCuadruplo.getArgumento1().equals("start")) {
                        codigoFinal += "main:\n";
                        codigoFinal += "       move $fp, $sp\n";
                    } else {
                        int pila = 8;
                        int cont = 0;
                        codigoFinal += "_" + currentCuadruplo.getArgumento1() + ":\n";
                        codigoFinal += "       sw $fp, -4($sp)\n";
                        codigoFinal += "       sw $ra, -8($sp)\n";
                        // getFuncion encuentra la funcion por medio de su ID 
                        Funcion funcion = getFuncion(ambito_siguiente, ambitos);
                        if (funcion != null) {
                            if (funcion.getParams().size() > 4) {
                                for (int i = 4; i < funcion.getParams().size(); i++) {
                                    if (funcion.getParams().get(i).equals("TypeBoolean")) {
                                        pila++;
                                        codigoFinal += "       sw $s" + cont + ", -" + pila + "($sp)\n";
                                    } else {
                                        pila += 4;
                                        codigoFinal += "       sw $s" + cont + ", -" + pila + "($sp)\n";
                                    }
                                    cont++;
                                }
                            }
                        }
                    }
                    break;
                }
                case "ProcEnd": {
                    if (ambito_siguiente.equals("start")) {
                        codigoFinal += "\n       li $v0,10\n"
                                + "       syscall\n";
                    }
                    break;
                }
                case "ETIQ": {
                    codigoFinal += "_" + currentCuadruplo.getArgumento1() + ":\n";
                    break;
                }
                case "GOTO": {
                    codigoFinal += "\n       b _" + currentCuadruplo.getArgumento1() + "\n";
                    break;
                }
                case "PUT_LINE":
                case "PUT": {
                    codigoFinal += "\n       li $v0,";
                    String var = currentCuadruplo.getArgumento1();
                    Valor aux = getVar(var, ambitos);
                    if (aux != null && (aux.type.equals("TypeInteger") || aux.type.equals("TypeFloat"))) {
                        codigoFinal += " 1"
                                + "\n       move $a0, $s" + getOffsetVariable(currentCuadruplo.getArgumento1())
                                + "\n       syscall\n";

                    } else if (aux != null && aux.type.equals("TypeBoolean")) {  // En caso de que sea un booleano
                        codigoFinal += " 1"
                                + "\n       move $a0, $s" + getOffsetVariable(currentCuadruplo.getArgumento1())
                                + "\n       syscall\n";
                    }
                    if (currentCuadruplo.operador.equals("PUT_LINE")) {
                        codigoFinal
                                += "       li $v0, 4\n"
                                + "       la $a0, newline\n"
                                + "       syscall\n";
                    }
                    break;
                }
                case "GET": {
                    String tipo = "";
                    codigoFinal += "\n       li $v0,";

                    String var = currentCuadruplo.getArgumento1();
                    Valor aux1 = getVar(var, ambitos);
                    if (aux1 != null) { // Ver si la variable es global
                        if (aux1.type.equals("TypeInteger")) {
                            codigoFinal += " 1"
                                    + "\n       syscall"
                                    + "\n       move $s" + getOffsetVariable(currentCuadruplo.getArgumento1()) + ", $v0" + "\n";
                        }
                    }
                    break;
                }
                case "-":
                case "*":
                case "/":
                case "+": {
                    // Si el argumento del codigo intermedio, contiene temporales, no se hace un lw para pasarlo a registro
                    if (!currentCuadruplo.argumento1.contains("#t")) {
                        int aux = auxDisponible();
                        if (isVariable(currentCuadruplo.argumento1, ambitos)) {
                            codigoFinal += "\n       move $t" + aux + ", " + "$s" + getOffsetVariable(currentCuadruplo.argumento1);
                        } else {
                            codigoFinal += "\n       li $t" + aux + ", " + currentCuadruplo.argumento1;
                        }
                        tempOcupados.add(aux);
                    }

                    if (!currentCuadruplo.argumento2.contains("#t")) {
                        int aux = auxDisponible();
                        if (isVariable(currentCuadruplo.argumento2, ambitos)) {
                            codigoFinal += "\n       move $t" + aux + ", " + "$s" + getOffsetVariable(currentCuadruplo.argumento2);
                        } else {
                            codigoFinal += "\n       li $t" + aux + ", " + currentCuadruplo.argumento2;
                        }
                        tempOcupados.add(aux);
                    }

                    int aux = auxDisponible();
                    String op = "";
                    if (currentCuadruplo.operador.equals("+")) {
                        op = "add";
                    } else if (currentCuadruplo.operador.equals("-")) {
                        op = "sub";
                    } else if (currentCuadruplo.operador.equals("/")) {
                        op = "div";
                    } else if (currentCuadruplo.operador.equals("*")) {
                        op = "mul";
                    }
                    codigoFinal += "\n       " + op + " $t" + aux + ", $t" + (!currentCuadruplo.argumento1.contains("#t") ? devuelveTemp() : devuelveRes()) + ", $t" + (!currentCuadruplo.argumento2.contains("#t") ? devuelveTemp() : devuelveRes());
                    pilaMatematica.add(aux);
                    break;
                }
                case ":=": {
                    String var = currentCuadruplo.getResultado();
                    Valor aux = getVar(var, ambitos);
                    String val = currentCuadruplo.getArgumento1();
                    if (aux != null && (aux.type.equals("TypeInteger") || aux.type.equals("TypeFloat"))) {
                        if (!pilaMatematica.isEmpty()) {
                            int temp = pilaMatematica.get(pilaMatematica.size() - 1);
                            pilaMatematica.remove(pilaMatematica.size() - 1);
                            codigoFinal += ""
                                    + "\n       move $s" + aux.offset + ", $t" + temp + "\n";
                        } else {
                            codigoFinal += ""
                                    + "\n       li $s" + aux.offset + ", " + val + "\n";
                        }
                    } else if (aux != null && aux.type.equals("TypeBoolean")) {  // En caso de que sea un booleano
                        codigoFinal += ""
                                + "\n       li $s" + aux.offset + ", " + (currentCuadruplo.getArgumento1().equals("True") ? "1" : "0");
                    }
                    break;
                }
                default:
                    if (currentCuadruplo.getOperador().contains("IF")) {
                        String op = currentCuadruplo.getOperador().substring(2, currentCuadruplo.getOperador().length());
                        int t_izq = 0;
                        int t_der = 0;
                        for (int i = 0; i < 10; i++) {
                            if (!temporales.get(i).isVivo()) {
                                t_izq = i;
                                temporales.get(i).setVivo(true);
                                break;
                            }
                        }
                        for (int i = 0; i < 10; i++) {
                            if (!temporales.get(i).isVivo()) {
                                t_der = i;
                                temporales.get(i).setVivo(true);
                                break;
                            }
                        }
                        if (isVariable(currentCuadruplo.getArgumento1(), ambitos)) {
                            codigoFinal += "\n       move $t" + t_izq + ", $s" + getOffsetVariable(currentCuadruplo.getArgumento1()) + "\n";
                        } else {
                            codigoFinal += "\n       li $t" + t_izq + ", " + currentCuadruplo.getArgumento1() + "\n";

                        }

                        if (isVariable(currentCuadruplo.getArgumento2(), ambitos)) {
                            codigoFinal += "\n       move $t" + t_der + ", $s" + getOffsetVariable(currentCuadruplo.getArgumento2()) + "\n";
                        } else {
                            codigoFinal += "\n       li $t" + t_der + ", " + currentCuadruplo.getArgumento2() + "\n";

                        }
                        switch (op) {
                            case ">":
                                codigoFinal += "       bgt $t" + t_izq + ", $t" + t_der + ", _" + currentCuadruplo.getResultado() + "\n";
                                break;
                            case "<":
                                codigoFinal += "       blt $t" + t_izq + ", $t" + t_der + ", _" + currentCuadruplo.getResultado() + "\n";
                                break;
                            case ">=":
                                codigoFinal += "       bge $t" + t_izq + ", $t" + t_der + ", _" + currentCuadruplo.getResultado() + "\n";
                                break;
                            case "<=":
                                codigoFinal += "       ble $t" + t_izq + ", $t" + t_der + ", _" + currentCuadruplo.getResultado() + "\n";
                                break;
                            case "=":
                                codigoFinal += "       beq $t" + t_izq + ", $t" + t_der + ", _" + currentCuadruplo.getResultado() + "\n";
                                break;
                            case "/=":
                                codigoFinal += "       bne $t" + t_izq + ", $t" + t_der + ", _" + currentCuadruplo.getResultado() + "\n";
                                break;
                        }
                        temporales.get(t_izq).setVivo(false);
                        temporales.get(t_der).setVivo(false);
                    }

            }
        }
        jTextArea1.setText(codigoFinal);
        guardarArchivo(codigoFinal);
    }

    public static void guardarArchivo(String codigoFinal) {
        FileWriter fichero2 = null;
        PrintWriter pw = null;
        try {
            fichero2 = new FileWriter("./ada95.asm");
            pw = new PrintWriter(fichero2);
            pw.print(codigoFinal);
        } catch (IOException e) {
        }

        try {
            if (null != fichero2) {
                fichero2.close();
            }
        } catch (IOException e2) {
        }
    }

    private void addAllIds(Node arbol, Ambitos ambito) {
        if (!arbol.esHoja()) {
            for (Node hijo : arbol.getHijos()) {
                switch (hijo.valor) {
                    case "declaracion de variable simple":
                    case "Declaracion": {
                        String type = hijo.getHijo(0).valor;
                        for (Node nieto : hijo.getHijos()) {
                            if (nieto.valor.equals("id")) {
                                String id = nieto.getHijo(0).valor;
                                boolean error = ambito.agregarValor(id, new Valor(id, type));
                                if (!error) {
                                    Log("Error: Identificador %s ya declarado".formatted(id));
                                }
                            }
                        }
                        break;
                    }

                    case "declaracion y asignacion por funcion": {
                        String type = hijo.getHijo(0).valor;
                        String funcId = hijo.getHijo(hijo.getHijos().size() - 1).getHijo(0).valor;
                        for (Node nieto : hijo.getHijos()) {
                            if (nieto.valor.equals("id")) {
                                String id = nieto.getHijo(0).valor;
                                boolean error = ambito.agregarValor(id, new Valor(id, type));
                                if (!error) {
                                    Log("Error: Identificador %s ya declarado".formatted(id));
                                }
                            }
                        }
                        String parametros = "";
                        for (int i = 0; i < hijo.getHijo(hijo.getHijos().size() - 1).getHijos().size(); i++) {
                            Node nieto = hijo.getHijo(hijo.getHijos().size() - 1).getHijos().get(i);
                            if (nieto.valor.equals("id")) {
                                String paramId = nieto.getHijo(0).valor;
                                Object valor2 = ambito.getValor(paramId);
                                if (valor2 != null) {
                                    String paramIdType = ((Valor) valor2).type;
                                    parametros += paramIdType + ((i == hijo.getHijo(hijo.getHijos().size() - 1).getHijos().size() - 1) ? "" : "X");
                                } else {
                                    Log("Error: Identificador %s no declarado".formatted(paramId));
                                }
                            }
                        }
                        if (parametros.equals("")) {
                            parametros = "TypeNull";
                        }
                        parametros += "->" + type;
                        Object func = ambito.getFuncion("%s|%s".formatted(funcId, parametros));
                        if (func == null) {
                            Log("Error: La funcion %s con la forma %s no existe".formatted(funcId, parametros));
                        }
                        break;
                    }
                    case "declaracion y asignacion": {
                        String type = hijo.getHijo(0).valor;
                        String idsString = "";
                        for (int i = 0; i < hijo.getHijos().size(); i++) {
                            Node nieto = hijo.getHijos().get(i);
                            if (i != hijo.getHijos().size() - 1 && nieto.valor.equals("id")) {
                                String id = nieto.getHijo(0).valor;
                                boolean error = ambito.agregarValor(id, new Valor(id, type));
                                if (!error) {
                                    Log("Error: Identificador %s ya declarado".formatted(id));
                                }
                                idsString += "%s ".formatted(id);
                            } else {
                                if (nieto.valor.equals("id")) {
                                    String rightId = nieto.getHijo(0).valor;
                                    Object valor = ambito.getValor(rightId);
                                    if (valor != null) {
                                        if (!((Valor) valor).type.equals(type)) {
                                            Log("Error: Type Mismatch %s no esperaba una asignación de tipo %s".formatted(idsString, ((Valor) valor).type));
                                        }
                                    } else {
                                        Log("Error: Identificador %s no declarado".formatted(rightId));
                                    }

                                } else if (nieto.valor.equals("Valor") || nieto.valor.equals("value")) {
                                    String rightType = nieto.getHijo(0).valor;
                                    if (!rightType.startsWith("Type")) {
                                        rightType = "Type" + rightType;
                                    }
                                    if (!type.equals(rightType)) {
                                        Log("Error: Type Mismatch %s no esperaba una asignación de tipo %s".formatted(idsString, rightType));
                                    }
                                }
                            }
                        }

                        break;
                    }
                    case "declaracion y asignacion expresión": {
                        String type = hijo.getHijo(0).valor;
                        String expType = "";
                        String idsString = "";
                        for (Node nieto : hijo.getHijos()) {
                            switch (nieto.valor) {
                                case "id": {
                                    String id = nieto.getHijo(0).valor;
                                    boolean error = ambito.agregarValor(id, new Valor(id, type));
                                    if (!error) {
                                        Log("Error: Identificador %s ya declarado".formatted(id));
                                    }
                                    idsString += "%s ".formatted(id);
                                    break;
                                }
                                case "expresión": {
                                    expType = "Type" + evaluarExpresion(nieto, ambito);

                                }
                            }
                        }

                        if (!type.equals(expType)) {
                            Log("Error: Type Mismatch %s no esperaba una asignación de tipo %s".formatted(idsString, expType));
                        }
                        break;
                    }
                }
            }
        }
    }

    private Ambitos CrearAmbito(Node Arbol, Ambitos padre) {
        String nombre = Arbol.valor;
        Ambitos ambito = new Ambitos(nombre);
        if (padre != null) {
            padre.addHijo(ambito);
        }
        ArrayList<Valor> ids = new ArrayList<>();
        boolean isFunc = false;
        for (Node hijo : Arbol.getHijos()) {
            switch (hijo.valor) {
                case "Parametro":
                case "Parametros": {
                    if (hijo.valor.equals("Parametros")) {
                        for (Node parametro : hijo.getHijos()) {
                            String type = parametro.getHijo(0).valor;
                            String tipo = parametro.getHijo(parametro.getHijos().size() - 1).valor;
                            for (Node nieto : parametro.getHijos()) {
                                if (nieto.valor.equals("id")) {
                                    String id = nieto.getHijo(0).valor;
                                    boolean error = ambito.agregarValor(id, new Valor(id, type, tipo));
                                    if (!error) {
                                        Log("Error: Identificador %s ya declarado".formatted(id));
                                    }
                                }
                            }

                        }
                    } else {
                        String type = hijo.getHijo(0).valor;
                        String tipo = hijo.getHijo(hijo.getHijos().size() - 1).valor;
                        for (Node nieto : hijo.getHijos()) {
                            if (nieto.valor.equals("id")) {
                                String id = nieto.getHijo(0).valor;
                                boolean error = ambito.agregarValor(id, new Valor(id, type, tipo));
                                if (!error) {
                                    Log("Error: Identificador %s ya declarado".formatted(id));
                                }
                            }
                        }
                    }
                    break;
                }
                case "Nombre de funcion":
                case "Nombre de procedure": {
                    isFunc = hijo.valor.equals("Nombre de funcion");
                    nombre = hijo.getHijo(0).valor;
                    ambito.NombreAmbito = nombre;
                    break;
                }

                case "GLOBAL": {
                    addAllIds(hijo, ambito);
                    for (Node nieto : hijo.getHijos()) {
                        switch (nieto.valor) {
                            case "Procedure":
                            case "Declaracion de funcion": {
                                if (nieto.valor.equals("Declaracion de funcion")) {
                                    CrearFuncion(nieto, ambito);
                                }

                                CrearAmbito(nieto, ambito);
                            }
                        }
                    }
                    break;
                }
                case "BODY": {
                    checkBody(hijo, ambito, isFunc);
                    break;
                }

            }
        }
        return ambito;
    }

    private void CrearFuncion(Node funcion, Ambitos ambito) {
        Funcion f = new Funcion();
        ArrayList<String> Params = new ArrayList<>();
        for (Node hijo : funcion.getHijos()) {
            switch (hijo.valor) {
                case "Parametro":
                case "Parametros": {
                    if (hijo.valor.equals("Parametros")) {
                        for (Node parametro : hijo.getHijos()) {
                            String type = parametro.getHijo(0).valor;
                            for (Node nieto : parametro.getHijos()) {
                                if (nieto.valor.equals("id")) {
                                    Params.add(type);
                                }
                            }
                        }
                    } else {
                        String type = hijo.getHijo(0).valor;
                        for (Node nieto : hijo.getHijos()) {
                            if (nieto.valor.equals("id")) {
                                Params.add(type);
                            }
                        }
                    }
                    break;
                }
                case "Nombre de funcion": {
                    String id = hijo.getHijo(0).valor;
                    f.id = id;
                    break;
                }
                case "TypeInteger":
                case "TypeBoolean":
                case "TypeFloat": {
                    f.tipo = hijo.valor;
                    break;
                }
            }
        }
        String parametros = "";
        for (int i = 0; i < Params.size(); i++) {
            String Param = Params.get(i);
            parametros += Param + ((i == Params.size() - 1) ? "" : "X");
        }
        if (Params.isEmpty()) {
            parametros = "TypeNull";
        }
        parametros += "->%s".formatted(f.tipo);
        f.type = parametros;
        boolean error = ambito.agregarFuncion("%s|%s".formatted(f.id, parametros), f);
        if (!error) {
            Log("Error: La funcion %s con la forma %s ya ha sido declarada".formatted(f.id, parametros));
        }
    }

    private void checkBody(Node body, Ambitos ambito, boolean isFunction) {
        for (Node hijo : body.getHijos()) {
            switch (hijo.valor) {
                case "else": {
                    Node bodyFor = hijo.getHijo(0);
                    checkBody(bodyFor, ambito, isFunction);
                    break;
                }
                case "declaración elsif":
                case "declaración if": {
                    Node expresion = hijo.getHijo(1).getHijo(0);
                    if (!expresion.valor.equals("expresión")) {
                        expresion = hijo.getHijo(1);
                    }
                    Node bodyIf = hijo.getHijo(2);
                    checkBody(bodyIf, ambito, isFunction);
                    checkBody(hijo, ambito, isFunction);
                    evaluarExpresion(expresion, ambito);
                    break;
                }
                case "declaración ciclo for": {
                    Node bodyFor = hijo.getHijo(1);
                    String id = hijo.getHijo(0).getHijo(0).getHijo(0).valor;
                    boolean error = ambito.agregarValor(id, new Valor(id, "TypeInteger"));
                    if (!error) {
                        Log("Error: Identificador %s ya declarado".formatted(id));
                    }
                    checkBody(bodyFor, ambito, isFunction);
                    break;
                }
                case "declaración ciclo while": {
                    Node expresion = hijo.getHijo(1).getHijo(0);
                    Node bodyWhile = hijo.getHijo(2);
                    checkBody(bodyWhile, ambito, isFunction);
                    evaluarExpresion(expresion, ambito);
                    break;
                }
                case "declaración ciclo loop": {
                    Node bodyLoop = hijo.getHijo(0);
                    checkBody(bodyLoop, ambito, isFunction);
                    boolean hasExit = false;
                    for (Node nieto : bodyLoop.getHijos()) {
                        switch (nieto.valor) {
                            case "Exit when": {
                                Node expresion = nieto.getHijo(0);
                                evaluarExpresion(expresion, ambito);
                                hasExit = true;
                            }
                        }
                    }
                    if (!hasExit) {
                        Log("Error: Loop sin condición de salida");
                    }
                    break;
                }
                case "Return": {
                    if (!isFunction) {
                        Log("Error: Return inesperado");
                    }
                    break;
                }
                case "Invocacion de la funcion sin parametros": {
                    String id = hijo.getHijo(0).valor;
                    Object f = ambito.getFuncionLLamada("%s|%s".formatted(id, "TypeNull"));
                    if (f == null) {
                        Log("Error: La funcion %s con parametros %s no existe".formatted(id, "TypeNull"));
                    }
                    break;
                }
                case "Invocacion de la funcion con parametros": {
                    String id = hijo.getHijo(0).valor;
                    String parametros = "";
                    for (int i = 0; i < hijo.getHijos().size(); i++) {
                        Node nieto = hijo.getHijos().get(i);
                        if (nieto.valor.equals("id")) {
                            String paramId = nieto.getHijo(0).valor;
                            Object valor2 = ambito.getValor(paramId);
                            if (valor2 != null) {
                                String paramIdType = ((Valor) valor2).type;
                                parametros += paramIdType + ((i == hijo.getHijos().size() - 1) ? "" : "X");
                            } else {
                                Log("Error: Identificador %s no declarado".formatted(paramId));
                            }
                        }
                    }
                    Object f = ambito.getFuncionLLamada("%s|%s".formatted(id, parametros));
                    if (f == null) {
                        Log("Error: La funcion %s con parametros %s no existe".formatted(id, parametros));
                    }
                    break;
                }
                case "asignacion por llamada a funcion": {
                    String id = hijo.getHijo(0).getHijo(0).valor;
                    String funcId = hijo.getHijo(1).getHijo(0).valor;
                    Object valor = ambito.getValor(id);
                    if (valor != null) {
                        String IdType = ((Valor) valor).type;
                        String parametros = "";
                        for (int i = 0; i < hijo.getHijo(1).getHijos().size(); i++) {
                            Node nieto = hijo.getHijo(1).getHijos().get(i);
                            if (nieto.valor.equals("id")) {
                                String paramId = nieto.getHijo(0).valor;
                                Object valor2 = ambito.getValor(paramId);
                                if (valor2 != null) {
                                    String paramIdType = ((Valor) valor2).type;
                                    parametros += paramIdType + ((i == hijo.getHijo(1).getHijos().size() - 1) ? "" : "X");
                                } else {
                                    Log("Error: Identificador %s no declarado".formatted(paramId));
                                }
                            }
                        }
                        if (parametros.equals("")) {
                            parametros = "TypeNull";
                        }
                        parametros += "->" + IdType;
                        Object func = ambito.getFuncion("%s|%s".formatted(funcId, parametros));
                        if (func == null) {
                            Log("Error: La funcion %s con la forma %s no existe".formatted(funcId, parametros));
                        }
                    } else {
                        Log("Error: Identificador %s no declarado".formatted(id));
                    }

                    break;
                }
                case "asignacion": {
                    String id = hijo.getHijo(0).getHijo(0).valor;
                    String type = hijo.getHijo(1).getHijo(0).valor;
                    if (!type.startsWith("Type")) {
                        type = "Type" + type;
                    }
                    String value = hijo.getHijo(1).getHijo(0).getHijo(0).valor;
                    Object valor = ambito.getValor(id);
                    if (valor != null) {
                        ambito.getValor(id);
                        String IdType = ((Valor) valor).type;
                        if (type.equals(IdType)) {
                            ((Valor) valor).valor = value;
                        } else {
                            Log("Error: Type Mismatch %s no esperaba una asignación de tipo %s".formatted(id, type));
                        }
                    } else {
                        Log("Error: Identificador %s no declarado".formatted(id));
                    }
                    break;
                }
                case "asignación expresión": {
                    String id = hijo.getHijo(0).getHijo(0).valor;
                    Object valor = ambito.getValor(id);
                    if (valor != null) {
                        String type = ((Valor) valor).type;
                        Node expresion = hijo.getHijo(1);
                        String typeEx = "Type" + evaluarExpresion(expresion, ambito);
                        if (!type.equals(typeEx)) {
                            Log("Error: Type Mismatch %s no esperaba una asignación de tipo %s".formatted(id, typeEx));
                        }
                    } else {
                        Log("Error: Identificador %s no declarado".formatted(id));
                    }
                    break;
                }
                case "GET":
                case "PUT_LINE":
                case "PUT": {
                    String id = hijo.getHijo(0).getHijo(0).valor;
                    Object valor = ambito.getValor(id);
                    if (valor == null) {
                        Log("Error: Identificador %s no declarado".formatted(id));
                    }
                    break;
                }
            }
        }
    }

    private String evaluarExpresion(Node expresion, Ambitos ambito) {
        String E1 = expresion.getHijo(0).valor;
        if (E1.equals("expresión")) {
            E1 = evaluarExpresion(expresion.getHijo(0), ambito);
        }
        if (E1.equals("id")) {
            String id = expresion.getHijo(0).getHijo(0).valor;
            Object valor = ambito.getValor(id);
            if (valor != null) {
                E1 = ((Valor) valor).type;
                E1 = E1.replace("Type", "");
            } else {
                Log("Error: Identificador %s no declarado".formatted(id));
                return "Unknown";
            }
        }
        String E2 = expresion.getHijo(1).valor;
        String E3 = "#";
        if (expresion.getHijos().size() == 3) {
            E3 = expresion.getHijo(2).valor;
        }
        String tipoRet = "Error";
        if (!E1.equals("#") && E2.equals("#") && E3.equals("#")) {
            return E1;
        }

        if (!E1.equals("#") && !E2.equals("#") && E3.equals("#")) {
            String tipoExpresion = evaluarExpresion(expresion.getHijo(1), ambito);
            if (!E1.equals(tipoExpresion)) {
                Log("Error: Type Mismatch no se espera una operación %s %s %s".formatted(E1, E2, tipoExpresion));
            }
            return tipoExpresion;
        }

        if (!E1.equals("#") && E2.equals("#") && !E3.equals("#")) {
            String tipoExpresion = evaluarExpresion(expresion.getHijo(2), ambito);
            if (!E1.equals(tipoExpresion)) {
                Log("Error: Type Mismatch no se espera una operación %s %s %s".formatted(E1, E3, tipoExpresion));
            }
            return tipoExpresion;
        }

        if (!E1.equals("#") && !E2.equals("#") && !E3.equals("#")) {
            String tipoE2 = evaluarExpresion(expresion.getHijo(1), ambito);
            String tipoE3 = evaluarExpresion(expresion.getHijo(2), ambito);
            if (!E1.equals(tipoE2)) {
                Log("Error: Type Mismatch no se espera una operación %s %s %s".formatted(E1, E2, tipoE2));
            }
            if (!E1.equals(tipoE3)) {
                Log("Error: Type Mismatch no se espera una operación %s %s %s".formatted(E1, E3, tipoE3));
            }
            return E1;
        }
        return tipoRet;
    }

    private static void Log(String log) {
        semanticErrors++;
        logs += log + "\n";
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Variables">   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel FileIconPanel;
    private javax.swing.JPanel FileIconPanel1;
    private javax.swing.JPanel FileIconPanel2;
    private javax.swing.JPanel FileIconPanel4;
    private javax.swing.JPanel FileIconPanel5;
    private javax.swing.JPanel FileIconPanel6;
    private javax.swing.JPanel FileIconPanel7;
    private javax.swing.JPanel SideBar;
    private javax.swing.JPanel TopBar;
    private javax.swing.JLabel buildButtonLabel;
    private javax.swing.JPanel centeredPanel;
    private javax.swing.JTextArea consola;
    private javax.swing.JTextArea editorCodigo;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private static javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    private javax.swing.JTree jTree2;
    private javax.swing.JLabel loadButtonLabel;
    private javax.swing.JPanel panelEditorCodigo;
    private javax.swing.JLabel runButtonLabel;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    public static Node root;
    public static Ambitos ambitos;
    public static String logs = "";
    public static int semanticErrors = 0;
    public static int cont_temp = 0;
    public static int cont_etiq = 0;

    public static ArrayList<Integer> pilaMatematica = new ArrayList<>();
    public static ArrayList<Integer> tempOcupados = new ArrayList<>();

    public static String ambito_siguiente = "";

    public static ArrayList<Cuadruplo> cuadruplo = new ArrayList<>();

}
