package picoada;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.List;


parser code
{:

    private String Logs="";
    public static int errors = 0;
    public static Node Arbol;
    public static Symbol found;
    public static LinkedList<String> Errores = new LinkedList<String>();


    public String getLogs(){
        return this.Logs;
    }

    public void Log(String cadena){
        this.Logs += cadena + "\n" ;
    }

    public void syntax_error(Symbol s){ 
        Log("Error Sintáctico en la Columna " + (s.left) +
        " linea "+s.right+ ". No se esperaba este componente: " +s.value+".");
        
        errors++;

        List expected =expected_token_ids();
        if(expected.size()!=0){
            int id;
            Log("TOKEN ESPERADO..");
            for(int i=0;i<expected.size();i++){
                id = (int) expected.get(i);
                String suffix = i == expected.size() - 1?"":" | ";    
                Log(sym.terminalNames[id]+suffix);
            }
        }
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Log("Error síntactico irrecuperable en la columna " + 
        (s.left)+ " linear "+s.right+". Componente " + s.value + 
        " no reconocido.");
        // Log("Sintaxis mal escrito,irrecuperable"); 
    }

:};

terminal     
    procedure,
    begin,
    end,
    string,
    is,
    For,
    loop,
    While,
    Integer,
    TypeFloat,
    TypeInteger,
    TypeBoolean,
    If,
    then,
    elsif,
    Else,
    put,
    not,
    and,
    or,
    OperadorRelacional,
    Id,
    OperadorSuma,
    OperadorMultiplicacion,
    asignacion,
    DosPuntos,
    PuntoComa,
    AbrirParentesis,
    CerrarParentesis,
    AbrirCorchete,
    CerrarCorchete,
    coma,
    AbrirBracket,
    CerrarBracket,
    punto,
    comillas,
    ContString,
    EOL,
    comentario,
    ERROR;

non terminal INICIO, PROGRAMA, DECLARACION;

precedence left OperadorSuma;
precedence left OperadorMultiplicacion;

start with INICIO;

// INICIO me lleva a PROGRAMA para poder añadir el root del arbol
INICIO ::= PROGRAMA
{:
System.out.println("<ROOT> No terminal INICIO");
:}
;

// Comienza el analisis Sintáctico
PROGRAMA ::= procedure Id is begin DECLARACION end Id PuntoComa
{:
System.out.println("<NODO> No terminal PROGRAMA");
:}
;

DECLARACION ::= Id DosPuntos TypeInteger asignacion Integer:i PuntoComa
{:
System.out.println("<NODO> No terminal DECLARACION" + i.toString());
:}
;
