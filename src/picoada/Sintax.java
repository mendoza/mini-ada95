
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package picoada;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\003\000\002\003" +
    "\013\000\002\003\004\000\002\046\020\000\002\050\006" +
    "\000\002\050\005\000\002\050\004\000\002\052\006\000" +
    "\002\052\002\000\002\051\003\000\002\051\005\000\002" +
    "\051\003\000\002\004\006\000\002\027\010\000\002\011" +
    "\010\000\002\011\010\000\002\053\003\000\002\053\005" +
    "\000\002\041\006\000\002\041\006\000\002\040\006\000" +
    "\002\035\011\000\002\035\012\000\002\035\012\000\002" +
    "\036\004\000\002\037\007\000\002\037\006\000\002\037" +
    "\007\000\002\056\007\000\002\054\016\000\002\054\016" +
    "\000\002\054\016\000\002\042\004\000\002\042\002\000" +
    "\002\042\004\000\002\043\011\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\004\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\005\000\002\043\006\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\002\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\004\000\002\010\002" +
    "\000\002\006\003\000\002\006\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\004\000\002\047\002\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\004\000\002\016\005\000\002\021\003\000" +
    "\002\017\003\000\002\017\005\000\002\020\003\000\002" +
    "\020\006\000\002\020\003\000\002\020\005\000\002\020" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\012\003\000\002\012\005\000\002\012\003\000" +
    "\002\013\003\000\002\013\005\000\002\030\004\000\002" +
    "\034\005\000\002\034\002\000\002\033\004\000\002\032" +
    "\005\000\002\032\005\000\002\032\002\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\005\000\002\022\004\000\002\026\005\000\002" +
    "\026\002\000\002\025\004\000\002\024\005\000\002\024" +
    "\002\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\005\000\002\044\007\000\002\044\007\000" +
    "\002\044\007\000\002\044\007\000\002\045\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\003\005\004\006\001\002\000\004\002" +
    "\000\001\002\000\004\045\030\001\002\000\004\040\011" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\004\010\012\001\002\000\014\003\024\004\006" +
    "\005\uffc8\040\017\052\016\001\002\000\004\044\334\001" +
    "\002\000\014\003\005\004\006\005\uffc8\040\017\052\016" +
    "\001\002\000\014\003\uffcb\004\uffcb\005\uffcb\040\uffcb\052" +
    "\uffcb\001\002\000\004\040\300\001\002\000\010\044\ufff0" +
    "\047\ufff0\056\276\001\002\000\014\003\uffca\004\uffca\005" +
    "\uffca\040\uffca\052\uffca\001\002\000\004\005\uffc7\001\002" +
    "\000\004\005\031\001\002\000\014\003\uffcc\004\uffcc\005" +
    "\uffcc\040\uffcc\052\uffcc\001\002\000\016\003\005\004\006" +
    "\005\uffc8\040\017\045\030\052\016\001\002\000\014\003" +
    "\uffcd\004\uffcd\005\uffcd\040\uffcd\052\uffcd\001\002\000\014" +
    "\003\uffce\004\uffce\005\uffce\040\uffce\052\uffce\001\002\000" +
    "\004\005\uffc6\001\002\000\016\002\ufffe\003\ufffe\004\ufffe" +
    "\005\ufffe\040\ufffe\052\ufffe\001\002\000\032\003\046\006" +
    "\uffdf\011\032\012\054\013\053\022\044\026\042\027\037" +
    "\030\033\040\047\053\045\055\055\001\002\000\004\040" +
    "\244\001\002\000\004\046\240\001\002\000\036\003\uffd6" +
    "\006\uffd6\011\uffd6\012\uffd6\013\uffd6\022\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\040\uffd6\053\uffd6\055\uffd6" +
    "\001\002\000\036\003\uffd7\006\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\040\uffd7\053\uffd7\055\uffd7\001\002\000\036\003\uffdb\006" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\022\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\040\uffdb\053\uffdb\055\uffdb\001" +
    "\002\000\004\046\231\001\002\000\036\003\uffd9\006\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\022\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\040\uffd9\053\uffd9\055\uffd9\001\002" +
    "\000\036\003\uffda\006\uffda\011\uffda\012\uffda\013\uffda\022" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\040\uffda" +
    "\053\uffda\055\uffda\001\002\000\004\046\217\001\002\000" +
    "\004\045\216\001\002\000\014\014\061\016\063\021\067" +
    "\040\060\046\066\001\002\000\012\003\136\021\166\040" +
    "\163\045\uffcf\001\002\000\032\003\136\011\032\012\054" +
    "\013\053\022\044\026\042\027\037\030\033\040\047\045" +
    "\145\053\045\055\055\001\002\000\006\043\125\046\124" +
    "\001\002\000\036\003\046\006\uffdf\011\032\012\054\013" +
    "\053\022\044\024\uffdf\025\uffdf\026\042\027\037\030\033" +
    "\040\047\053\045\055\055\001\002\000\004\006\120\001" +
    "\002\000\036\003\uffdc\006\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\022\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\040" +
    "\uffdc\053\uffdc\055\uffdc\001\002\000\014\014\061\016\063" +
    "\021\067\040\060\046\066\001\002\000\032\003\046\006" +
    "\uffdf\011\032\012\054\013\053\022\044\026\042\027\037" +
    "\030\033\040\047\053\045\055\055\001\002\000\004\054" +
    "\057\001\002\000\036\003\uffd5\006\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\022\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\040\uffd5\053\uffd5\055\uffd5\001\002\000\014\014\061" +
    "\016\063\021\067\040\060\046\066\001\002\000\020\012" +
    "\uff9e\023\uff9e\032\uff9e\033\uff9e\037\uff9e\045\uff9e\047\uff9e" +
    "\001\002\000\020\012\uffa0\023\uffa0\032\uffa0\033\uffa0\037" +
    "\uffa0\045\uffa0\047\uffa0\001\002\000\020\012\uffa2\023\uffa2" +
    "\032\101\033\uffa2\037\100\045\uffa2\047\uffa2\001\002\000" +
    "\020\012\uff9f\023\uff9f\032\uff9f\033\uff9f\037\uff9f\045\uff9f" +
    "\047\uff9f\001\002\000\014\012\uffa6\023\uffa6\033\074\045" +
    "\uffa6\047\uffa6\001\002\000\004\045\072\001\002\000\014" +
    "\014\061\016\063\021\067\040\060\046\066\001\002\000" +
    "\020\012\uffa1\023\uffa1\032\uffa1\033\uffa1\037\uffa1\045\uffa1" +
    "\047\uffa1\001\002\000\004\047\071\001\002\000\020\012" +
    "\uff9d\023\uff9d\032\uff9d\033\uff9d\037\uff9d\045\uff9d\047\uff9d" +
    "\001\002\000\036\003\uffd3\006\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\040\uffd3\053\uffd3\055\uffd3\001\002\000\012\012\uffa8\023" +
    "\uffa8\045\uffa8\047\uffa8\001\002\000\014\014\061\016\063" +
    "\021\067\040\060\046\066\001\002\000\014\012\uffa6\023" +
    "\uffa6\033\074\045\uffa6\047\uffa6\001\002\000\012\012\uffa7" +
    "\023\uffa7\045\uffa7\047\uffa7\001\002\000\014\012\uffa5\023" +
    "\uffa5\033\uffa5\045\uffa5\047\uffa5\001\002\000\014\014\061" +
    "\016\063\021\067\040\060\046\066\001\002\000\014\014" +
    "\061\016\063\021\067\040\060\046\066\001\002\000\020" +
    "\012\uffa2\023\uffa2\032\101\033\uffa2\037\100\045\uffa2\047" +
    "\uffa2\001\002\000\014\012\uffa4\023\uffa4\033\uffa4\045\uffa4" +
    "\047\uffa4\001\002\000\020\012\uffa2\023\uffa2\032\101\033" +
    "\uffa2\037\100\045\uffa2\047\uffa2\001\002\000\014\012\uffa3" +
    "\023\uffa3\033\uffa3\045\uffa3\047\uffa3\001\002\000\004\006" +
    "\107\001\002\000\004\012\110\001\002\000\004\045\111" +
    "\001\002\000\036\003\uffe4\006\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\040\uffe4\053\uffe4\055\uffe4\001\002\000\004\012\113\001" +
    "\002\000\032\003\046\006\uffdf\011\032\012\054\013\053" +
    "\022\044\026\042\027\037\030\033\040\047\053\045\055" +
    "\055\001\002\000\004\006\115\001\002\000\004\012\116" +
    "\001\002\000\004\045\117\001\002\000\036\003\uffdd\006" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\022\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\040\uffdd\053\uffdd\055\uffdd\001" +
    "\002\000\004\040\121\001\002\000\004\045\122\001\002" +
    "\000\016\002\uffff\003\uffff\004\uffff\005\uffff\040\uffff\052" +
    "\uffff\001\002\000\010\006\uffe0\024\uffe0\025\uffe0\001\002" +
    "\000\006\040\017\047\157\001\002\000\016\003\136\014" +
    "\127\016\126\021\132\040\130\046\131\001\002\000\012" +
    "\041\uff95\042\uff95\045\uff95\047\uff95\001\002\000\012\041" +
    "\uff96\042\uff96\045\uff96\047\uff96\001\002\000\012\041\uff94" +
    "\042\uff94\045\uff94\046\124\001\002\000\012\014\127\016" +
    "\126\040\143\046\131\001\002\000\004\045\154\001\002" +
    "\000\004\045\153\001\002\000\004\045\152\001\002\000" +
    "\012\041\uff97\042\147\045\uff97\047\uff97\001\002\000\004" +
    "\045\145\001\002\000\010\041\140\045\uff9a\047\uff9a\001" +
    "\002\000\012\014\127\016\126\040\143\046\131\001\002" +
    "\000\006\045\uff9c\047\uff9c\001\002\000\010\041\140\045" +
    "\uff9a\047\uff9a\001\002\000\012\041\uff94\042\uff94\045\uff94" +
    "\047\uff94\001\002\000\006\045\uff9b\047\uff9b\001\002\000" +
    "\004\045\ufffa\001\002\000\010\041\uff99\045\uff99\047\uff99" +
    "\001\002\000\012\014\127\016\126\040\143\046\131\001" +
    "\002\000\012\041\uff97\042\147\045\uff97\047\uff97\001\002" +
    "\000\010\041\uff98\045\uff98\047\uff98\001\002\000\036\003" +
    "\uffed\006\uffed\011\uffed\012\uffed\013\uffed\022\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\040\uffed\053\uffed\055" +
    "\uffed\001\002\000\036\003\uffec\006\uffec\011\uffec\012\uffec" +
    "\013\uffec\022\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\040\uffec\053\uffec\055\uffec\001\002\000\036\003\uffee" +
    "\006\uffee\011\uffee\012\uffee\013\uffee\022\uffee\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\030\uffee\040\uffee\053\uffee\055\uffee" +
    "\001\002\000\004\047\156\001\002\000\012\041\uff93\042" +
    "\uff93\045\uff93\047\uff93\001\002\000\004\045\ufffb\001\002" +
    "\000\004\047\161\001\002\000\004\045\ufffc\001\002\000" +
    "\010\006\uffde\024\uffde\025\uffde\001\002\000\006\045\uffd1" +
    "\046\124\001\002\000\004\045\167\001\002\000\004\045" +
    "\uffd0\001\002\000\004\045\uffd2\001\002\000\036\003\uffd4" +
    "\006\uffd4\011\uffd4\012\uffd4\013\uffd4\022\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\040\uffd4\053\uffd4\055\uffd4" +
    "\001\002\000\004\023\171\001\002\000\036\003\046\006" +
    "\uffdf\011\032\012\054\013\053\022\044\024\uffdf\025\uffdf" +
    "\026\042\027\037\030\033\040\047\053\045\055\055\001" +
    "\002\000\010\006\173\024\175\025\174\001\002\000\004" +
    "\022\214\001\002\000\032\003\046\006\uffdf\011\032\012" +
    "\054\013\053\022\044\026\042\027\037\030\033\040\047" +
    "\053\045\055\055\001\002\000\014\014\061\016\063\021" +
    "\067\040\060\046\066\001\002\000\004\006\203\001\002" +
    "\000\004\006\200\001\002\000\004\022\201\001\002\000" +
    "\004\045\202\001\002\000\036\003\uffea\006\uffea\011\uffea" +
    "\012\uffea\013\uffea\022\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\040\uffea\053\uffea\055\uffea\001\002\000\004" +
    "\022\204\001\002\000\004\045\205\001\002\000\036\003" +
    "\uffe9\006\uffe9\011\uffe9\012\uffe9\013\uffe9\022\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\040\uffe9\053\uffe9\055" +
    "\uffe9\001\002\000\004\023\207\001\002\000\036\003\046" +
    "\006\uffdf\011\032\012\054\013\053\022\044\024\uffdf\025" +
    "\uffdf\026\042\027\037\030\033\040\047\053\045\055\055" +
    "\001\002\000\010\006\uffe6\024\175\025\174\001\002\000" +
    "\004\006\uffe7\001\002\000\004\006\uffe5\001\002\000\004" +
    "\006\uffe8\001\002\000\004\045\215\001\002\000\036\003" +
    "\uffeb\006\uffeb\011\uffeb\012\uffeb\013\uffeb\022\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\040\uffeb\053\uffeb\055" +
    "\uffeb\001\002\000\036\003\uffd8\006\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\040\uffd8\053\uffd8\055\uffd8\001\002\000\012\014\220" +
    "\016\223\021\224\040\221\001\002\000\004\047\uffb0\001" +
    "\002\000\004\047\227\001\002\000\004\047\225\001\002" +
    "\000\004\047\uffae\001\002\000\004\047\uffaf\001\002\000" +
    "\004\045\226\001\002\000\036\003\uff91\006\uff91\011\uff91" +
    "\012\uff91\013\uff91\022\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\040\uff91\053\uff91\055\uff91\001\002\000\004" +
    "\045\230\001\002\000\036\003\uff92\006\uff92\011\uff92\012" +
    "\uff92\013\uff92\022\uff92\024\uff92\025\uff92\026\uff92\027\uff92" +
    "\030\uff92\040\uff92\053\uff92\055\uff92\001\002\000\012\014" +
    "\220\016\223\021\224\040\232\001\002\000\004\047\236" +
    "\001\002\000\004\047\234\001\002\000\004\045\235\001" +
    "\002\000\036\003\uff8f\006\uff8f\011\uff8f\012\uff8f\013\uff8f" +
    "\022\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\040" +
    "\uff8f\053\uff8f\055\uff8f\001\002\000\004\045\237\001\002" +
    "\000\036\003\uff90\006\uff90\011\uff90\012\uff90\013\uff90\022" +
    "\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\040\uff90" +
    "\053\uff90\055\uff90\001\002\000\004\040\241\001\002\000" +
    "\004\047\242\001\002\000\004\045\243\001\002\000\036" +
    "\003\uff8e\006\uff8e\011\uff8e\012\uff8e\013\uff8e\022\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\040\uff8e\053\uff8e" +
    "\055\uff8e\001\002\000\004\034\245\001\002\000\006\014" +
    "\246\040\247\001\002\000\004\061\260\001\002\000\004" +
    "\061\250\001\002\000\004\061\251\001\002\000\004\014" +
    "\252\001\002\000\004\012\253\001\002\000\032\003\046" +
    "\006\uffdf\011\032\012\054\013\053\022\044\026\042\027" +
    "\037\030\033\040\047\053\045\055\055\001\002\000\004" +
    "\006\255\001\002\000\004\012\256\001\002\000\004\045" +
    "\257\001\002\000\036\003\uffe1\006\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\040\uffe1\053\uffe1\055\uffe1\001\002\000\004\061\261" +
    "\001\002\000\006\014\262\040\263\001\002\000\004\012" +
    "\271\001\002\000\004\012\264\001\002\000\032\003\046" +
    "\006\uffdf\011\032\012\054\013\053\022\044\026\042\027" +
    "\037\030\033\040\047\053\045\055\055\001\002\000\004" +
    "\006\266\001\002\000\004\012\267\001\002\000\004\045" +
    "\270\001\002\000\036\003\uffe2\006\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\040\uffe2\053\uffe2\055\uffe2\001\002\000\032\003\046" +
    "\006\uffdf\011\032\012\054\013\053\022\044\026\042\027" +
    "\037\030\033\040\047\053\045\055\055\001\002\000\004" +
    "\006\273\001\002\000\004\012\274\001\002\000\004\045" +
    "\275\001\002\000\036\003\uffe3\006\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\040\uffe3\053\uffe3\055\uffe3\001\002\000\004\040\017" +
    "\001\002\000\006\044\uffef\047\uffef\001\002\000\004\046" +
    "\301\001\002\000\012\003\302\040\017\045\ufff8\047\ufff8" +
    "\001\002\000\004\047\ufff5\001\002\000\006\045\331\047" +
    "\ufff7\001\002\000\004\044\323\001\002\000\004\047\306" +
    "\001\002\000\004\053\307\001\002\000\010\015\312\017" +
    "\311\020\310\001\002\000\012\010\uffc5\043\uffc5\045\uffc5" +
    "\047\uffc5\001\002\000\012\010\uffc4\043\uffc4\045\uffc4\047" +
    "\uffc4\001\002\000\012\010\uffc3\043\uffc3\045\uffc3\047\uffc3" +
    "\001\002\000\004\010\314\001\002\000\014\003\024\004" +
    "\006\005\uffc8\040\017\052\016\001\002\000\004\005\316" +
    "\001\002\000\032\003\046\006\uffdf\011\032\012\054\013" +
    "\053\022\044\026\042\027\037\030\033\040\047\053\045" +
    "\055\055\001\002\000\004\006\320\001\002\000\004\040" +
    "\321\001\002\000\004\045\322\001\002\000\014\003\ufffd" +
    "\004\ufffd\005\ufffd\040\ufffd\052\ufffd\001\002\000\014\015" +
    "\uffbf\017\uffbf\020\uffbf\034\324\035\325\001\002\000\012" +
    "\015\uffc2\017\uffc2\020\uffc2\035\330\001\002\000\010\015" +
    "\uffc1\017\uffc1\020\uffc1\001\002\000\010\015\312\017\311" +
    "\020\310\001\002\000\006\045\ufff9\047\ufff9\001\002\000" +
    "\010\015\uffc0\017\uffc0\020\uffc0\001\002\000\012\003\302" +
    "\040\017\045\ufff8\047\ufff8\001\002\000\004\047\ufff6\001" +
    "\002\000\004\005\uffc9\001\002\000\010\015\312\017\311" +
    "\020\310\001\002\000\006\043\337\045\336\001\002\000" +
    "\014\003\ufff4\004\ufff4\005\ufff4\040\ufff4\052\ufff4\001\002" +
    "\000\016\003\136\014\127\016\126\021\340\040\130\046" +
    "\131\001\002\000\004\045\345\001\002\000\004\045\344" +
    "\001\002\000\004\045\343\001\002\000\014\003\ufff1\004" +
    "\ufff1\005\ufff1\040\ufff1\052\ufff1\001\002\000\014\003\ufff3" +
    "\004\ufff3\005\ufff3\040\ufff3\052\ufff3\001\002\000\014\003" +
    "\ufff2\004\ufff2\005\ufff2\040\ufff2\052\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\002\006\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\017\004" +
    "\025\006\021\007\013\010\020\011\024\027\022\046\014" +
    "\053\012\001\001\000\002\001\001\000\022\003\017\004" +
    "\025\007\013\010\332\011\024\027\022\046\014\053\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\017\004\025\007\013\010" +
    "\026\011\024\027\022\046\014\053\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\035\034\040\037\041\040\042\050\043\047" +
    "\044\033\045\055\050\042\054\051\056\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\167\031\061\033\063\001\001\000\006\050" +
    "\164\055\163\001\001\000\024\035\034\040\037\041\040" +
    "\043\161\044\033\045\055\050\042\054\051\056\035\001" +
    "\001\000\002\001\001\000\026\035\034\040\037\041\040" +
    "\042\122\043\047\044\033\045\055\050\042\054\051\056" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\111\031\061\033\063\001\001\000\026\035\034\040" +
    "\037\041\040\042\105\043\047\044\033\045\055\050\042" +
    "\054\051\056\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\064\031\061\033\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\076\001\001\000" +
    "\002\001\001\000\004\034\072\001\001\000\002\001\001" +
    "\000\010\030\067\031\061\033\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\061\033\074\001\001\000" +
    "\004\034\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\103\001\001\000\004\031\101\001\001\000" +
    "\004\032\102\001\001\000\002\001\001\000\004\032\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\035\034\040\037\041\040\042\113\043\047\044" +
    "\033\045\055\050\042\054\051\056\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\157\001\001\000\012\022" +
    "\132\023\134\025\136\050\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\154\023" +
    "\134\025\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\145\001\001\000\002\001" +
    "\001\000\004\026\140\001\001\000\006\023\134\025\141" +
    "\001\001\000\002\001\001\000\004\026\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\147\001\001\000\004\024\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\035\034\040\037\041\040\042\171\043\047\044" +
    "\033\045\055\050\042\054\051\056\035\001\001\000\006" +
    "\036\176\037\175\001\001\000\002\001\001\000\026\035" +
    "\034\040\037\041\040\042\212\043\047\044\033\045\055" +
    "\050\042\054\051\056\035\001\001\000\010\030\205\031" +
    "\061\033\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\035\034\040\037\041\040\042\207\043" +
    "\047\044\033\045\055\050\042\054\051\056\035\001\001" +
    "\000\006\036\211\037\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\035\034\040\037\041\040" +
    "\042\253\043\047\044\033\045\055\050\042\054\051\056" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\035\034" +
    "\040\037\041\040\042\264\043\047\044\033\045\055\050" +
    "\042\054\051\056\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\035" +
    "\034\040\037\041\040\042\271\043\047\044\033\045\055" +
    "\050\042\054\051\056\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\051\304\052\302\053\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\017\004\025\006\314\007\013\010\020\011\024" +
    "\027\022\046\014\053\012\001\001\000\002\001\001\000" +
    "\026\035\034\040\037\041\040\042\316\043\047\044\033" +
    "\045\055\050\042\054\051\056\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\051\331\052\302\053\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\340\023" +
    "\134\025\136\050\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private String Logs="";
    public static int errors = 0;
    public static int token = 0;
    public static Node Arbol;
    public static Symbol found;
    public static LinkedList<String> Errores = new LinkedList<String>();


    public String getLogs(){
        return this.Logs;
    }

    public void Log(String cadena){
        this.Logs += cadena + "\n" ;
    }

    public void syntax_error(Symbol s){ 
        Log("Error Sintáctico RECUPERABLE en la Columna " + (s.left+1) +
        " linea "+(s.right+1)+ ". No se esperaba este componente: " +s.value);

        System.out.println("Error Sintáctico RECUPERABLE en la Columna " + (s.left+1) +
        " linea "+(s.right+1)+ ". No se esperaba este componente: " +s.value);
        
        errors++;

        List expected =expected_token_ids();
        if(expected.size()!=0){
            int id;
            Log("TOKEN ESPERADO..");
            for(int i=0;i<expected.size();i++){
                id = (int) expected.get(i);
                String suffix = i == expected.size() - 1?"":" | ";    
                Log(sym.terminalNames[id]+suffix);
            }
        }
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Log("Error síntactico IRRECUPERABLE en la columna " + 
        (s.left+1)+ " linea "+(s.right+1)+". Componente " + s.value + 
        " no reconocido.");

        System.out.println("Error síntactico IRRECUPERABLE en la columna " + 
        (s.left+1)+ " linea "+(s.right+1)+". Componente " + s.value + 
        " no reconocido.");
        // Log("Sintaxis mal escrito,irrecuperable"); 
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROCEDURE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node start = new Node("Start",token);
    parser.token++;
    start.addHijos(((Node)b).getHijos());
    parser.Arbol = start;
    parser.Arbol.recorrido(Arbol,0);
    RESULT = start;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE ::= procedure Id is GLOBAL_START begin BODY end Id PuntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object bs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    Node node = new Node();
    node.addHijo((Node)b);
    node.addHijo((Node)bs);
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROCEDURE ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNC ::= Function Id AbrirParentesis PARAMETROS CerrarParentesis Return TYPE is GLOBAL_START begin BODY end Id PuntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int ptrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int ptrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object ptros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object bs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    System.out.println("Declaracion de funciones");
    
    Node node = new Node("Declaracion de funcion", parser.token);
    parser.token++;

    Node id = new Node("Nombre de funcion", parser.token);
    parser.token++;

    id.addHijo(i.toString(), parser.token);
    parser.token++;

    node.addHijo(id);
    node.addHijo((Node)b);
    node.addHijo((Node)bs);
    node.addHijo((Node)t);
    node.addHijo((Node)ptros);
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LLAMADA_F ::= Id AbrirParentesis MULT_IDS CerrarParentesis 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node node = new Node ("Invocacion de la funcion con parametros", parser.token);
    parser.token++;

    Node id = new Node(i.toString(), parser.token);
    parser.token++;
    
    node.addHijo(id);

    node.addHijos(((Node)ide).getHijos());

    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_F",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LLAMADA_F ::= Id AbrirParentesis CerrarParentesis 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node node = new Node ("Invocacion de la funcion sin parametros", parser.token);
    parser.token++;

    Node id = new Node(i.toString(), parser.token);
    parser.token++;
    
    node.addHijo(id);

    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_F",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LLAMADA_F ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_F",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PARAMETRO ::= MULT_IDS DosPuntos TIPO TYPE 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tpo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

    Node node = new Node("Parametro", parser.token);
    parser.token++;

    // Asigno el TYPE
    node.addHijo((Node)t);

    // Asigno MULT_IDS
    node.addHijos(((Node)ide).getHijos());

    parser.token++;

    // Asigno el TIPO
    node.addHijo((Node)tpo);
    

    RESULT = node;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PARAMETRO ::= 
            {
              Object RESULT =null;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;
		int ptroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ptroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ptro = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

   RESULT = ((Node)ptro);


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETROS ::= PARAMETRO PuntoComa PARAMETROS 
            {
              Object RESULT =null;
		int ptroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ptroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ptro = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ptrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ptrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ptros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

    Node decl = new Node("Declaracion de parametros" ,parser.token);
    parser.token++;


    decl.addHijo((Node)ptro);


    decl.addHijos(((Node)ptros).getHijos());


    RESULT = decl;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMETROS ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION_SIMPLE ::= MULT_IDS DosPuntos TYPE PuntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        System.out.println("Declaración simple");
        // Declaro el nodo declaración de variables
        Node decl = new Node("declaracion de variable simple",  parser.token);

        // Asigno el tipo
        decl.addHijo((Node)t);
        
        // Asigno el id
        
        decl.addHijos(((Node)i).getHijos());

        parser.token++;

        RESULT = decl;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_EXPRESION ::= MULT_IDS DosPuntos TYPE asignacion NODE_EXPRESION PuntoComa 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node decl = new Node("declaracion y asignacion expresión",  parser.token);
     
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Node)t);
        // Asigno el id
        Node id=new Node("id",parser.token);
        parser.token++;
        decl.addHijos(((Node)ide).getHijos());
        parser.token++;
        
        // Asigno el valor
        // Aquí valido si solo se le asigna un id o un número
        Node temp = (Node)n;
        if (temp.getHijos().size() == 3){
            String id1, id2, num;
            num = temp.getHijo(0).getValor();
            id1 = temp.getHijo(1).getValor();
            id2 = temp.getHijo(2).getValor();
            if(id1.equals("#") && id2.equals("#") && num.equals("num") ){
                Node newNode = new Node("valor",temp.getID());
                newNode.addHijo(temp.getHijo(0));
                decl.addHijo(newNode);
                decl.setValor("declaracion y asignacion");
            }else if (id1.equals("#") && id2.equals("#") && num.equals("id")){
                decl.addHijo(temp.getHijo(0));
                decl.setValor("declaracion y asignacion");
            }else{
                decl.addHijo((Node)n);
            }
        }else{
            decl.addHijo((Node)n);
        }

        RESULT = decl;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION_ASIGNACION ::= MULT_IDS DosPuntos TYPE asignacion Boolean PuntoComa 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node decl = new Node("declaracion y asignacion",  parser.token);

        // Asigno el tipo
        decl.addHijo((Node)t);

        // Asigno el id
        parser.token++;
        Node id=new Node("id",parser.token);

        parser.token++;

        decl.addHijos(((Node)ide).getHijos());

        // Asigno el valor
        parser.token++;
        Node value =new Node("value",parser.token);

        parser.token++;
        Node tipo = new Node("TypeBoolean",parser.token);

        parser.token++;
        Node valor = new Node(""+b,parser.token);

        parser.token++;
        tipo.addHijo(valor);
        value.addHijo(tipo);
        decl.addHijo(value);

        RESULT = decl;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_ASIGNACION ::= MULT_IDS DosPuntos TYPE asignacion LLAMADA_F PuntoComa 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node decl = new Node("declaracion y asignacion por funcion",  parser.token);
        parser.token++;

        // Asigno el tipo
        decl.addHijo((Node)t);

        // Asigno el id
        Node id=new Node("id",parser.token);
        parser.token++;

        id.addHijo(new Node(ide.toString(),parser.token));

        decl.addHijos(((Node)ide).getHijos());
        parser.token++;

        // Asigno el valor
        decl.addHijo((Node)f);

        RESULT = decl;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MULT_IDS ::= Id 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node decl = new Node("Declaracion" ,parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    decl.addHijo(id);


    id.addHijo(new Node(ids.toString(),parser.token));
    parser.token++;

    RESULT = decl;



              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MULT_IDS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MULT_IDS ::= Id coma MULT_IDS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

    Node decl = new Node("Declaracion" ,parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;


    id.addHijo(new Node(ide.toString(),parser.token));
    parser.token++;

    decl.addHijo(id);


    decl.addHijos(((Node)ids).getHijos());


    RESULT = decl;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MULT_IDS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACION ::= Id asignacion Boolean PuntoComa 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node decl = new Node("asignacion",  parser.token);

        // Asigno el id
        parser.token++;
        Node id=new Node("id",parser.token);

        parser.token++;
        id.addHijo(ide.toString(),parser.token);

        decl.addHijo(id);

        // Asigno el valor
        parser.token++;
        Node value =new Node("value",parser.token);

        parser.token++;
        Node tipo = new Node("TypeBoolean",parser.token);

        parser.token++;
        Node valor = new Node(""+b,parser.token);

        parser.token++;
        tipo.addHijo(valor);
        value.addHijo(tipo);
        decl.addHijo(value);

        RESULT = decl;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= Id asignacion LLAMADA_F PuntoComa 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node decl = new Node("declaracion y asignacion por llamada a funcion",  parser.token);
        parser.token++;

        // Asigno el id
        Node id=new Node("id",parser.token);
        parser.token++;
        id.addHijo(new Node(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;

        // Asigno el valor
        decl.addHijo((Node)f);

        RESULT = decl;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNAREXPREION ::= Id asignacion NODE_EXPRESION PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node decl = new Node("asignación expresión",  parser.token);
        parser.token++;
        // Asigno el id
        Node id=new Node("id",parser.token);
        parser.token++;
        id.addHijo(new Node(c.toString(),parser.token));
        parser.token++;
        decl.addHijo(id);
        // Asigno el valor
        // Aquí valido si solo se le asigna un id o un número
        Node temp = (Node)n;
        if (temp.getHijos().size() == 3){
            String id1, id2, num;
            num = temp.getHijo(0).getValor();
            id1 = temp.getHijo(1).getValor();
            id2 = temp.getHijo(2).getValor();
            if(id1.equals("#") && id2.equals("#") && num.equals("num") ){
                Node newNode = new Node("valor",temp.getID());
                newNode.addHijo(temp.getHijo(0));
                decl.addHijo(newNode);
                decl.setValor("asignacion");
            }else if (id1.equals("#") && id2.equals("#") && num.equals("id")){
                decl.addHijo(temp.getHijo(0));
                decl.setValor("asignacion");
            }else{
                decl.addHijo((Node)n);
            }
        }else{
            decl.addHijo((Node)n);
        }


        RESULT = decl;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAREXPREION",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IFSTATE ::= If EXPRESION_BOOLEAN then BODY end If PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    Node node=new Node("declaración if",parser.token);
    parser.token++;
    Node ife= new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFSTATE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IFSTATE ::= If EXPRESION_BOOLEAN then BODY ELSESTATE end If PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    Node node = new Node("declaración if",parser.token);
    parser.token++;
    Node ife=new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    node.addHijo((Node)el);
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFSTATE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IFSTATE ::= If EXPRESION_BOOLEAN then BODY ELSIFSTATE end If PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    Node node = new Node("declaración if",parser.token);
    parser.token++;
    Node ife=new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    node.addHijo((Node)el);
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFSTATE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSESTATE ::= Else BODY 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node = new Node("else",parser.token);
    parser.token++;
    if (b!=null) node.addHijo((Node)b);
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSESTATE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELSIFSTATE ::= elsif EXPRESION_BOOLEAN then BODY ELSIFSTATE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object eif = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("declaración elsif",parser.token);
    parser.token++;
    Node ife= new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    node.addHijo((Node)eif);
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSIFSTATE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELSIFSTATE ::= elsif EXPRESION_BOOLEAN then BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("declaración elsif",parser.token);
    parser.token++;
    Node ife= new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSIFSTATE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELSIFSTATE ::= elsif EXPRESION_BOOLEAN then BODY ELSESTATE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node = new Node("declaración elsif",parser.token);
    parser.token++;
    Node ife=new Node("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Node)e);
    if (b!=null) node.addHijo((Node)b);
    node.addHijo((Node)el);
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSIFSTATE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CICLOLOOP ::= loop BODY end loop PuntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node ciclo = new Node("declaración ciclo loop",parser.token);
        parser.token++;
        ciclo.addHijo((Node)b);
        RESULT=ciclo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOLOOP",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CICLOFOR ::= For Id in Integer punto punto Integer loop BODY end loop PuntoComa 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node ciclo = new Node("declaración ciclo for",parser.token);
        parser.token++;

        // Expresión
        Node expr = new Node("expresión for",parser.token);
        parser.token++;

        Node id=new Node("id",parser.token);
        parser.token++;
        id.addHijo(ide.toString(),parser.token);
        parser.token++;

        Node num1=new Node("Integer",parser.token);
        parser.token++;
        num1.addHijo(""+l,parser.token);
        parser.token++;

        Node num2=new Node("Integer",parser.token);
        parser.token++;
        num2.addHijo(""+h,parser.token);
        parser.token++;

        expr.addHijo(id);
        expr.addHijo(num1);
        expr.addHijo(num2);
        ciclo.addHijo(expr);
        ciclo.addHijo((Node)b);

        RESULT= ciclo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CICLOFOR ::= For Id in Integer punto punto Id loop BODY end loop PuntoComa 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node ciclo = new Node("declaración ciclo for",parser.token);
        parser.token++;

        // Expresión
        Node expr = new Node("expresión for",parser.token);
        parser.token++;

        Node id=new Node("id",parser.token);
        parser.token++;
        id.addHijo(ide.toString(),parser.token);
        parser.token++;

        Node num1=new Node("Integer",parser.token);
        parser.token++;
        num1.addHijo(""+l,parser.token);
        parser.token++;

        Node num2=new Node("Id",parser.token);
        parser.token++;
        num2.addHijo(""+h,parser.token);
        parser.token++;

        expr.addHijo(id);
        expr.addHijo(num1);
        expr.addHijo(num2);
        ciclo.addHijo(expr);
        ciclo.addHijo((Node)b);

        RESULT= ciclo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CICLOFOR ::= For Id in Id punto punto Integer loop BODY end loop PuntoComa 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node ciclo = new Node("declaración ciclo for",parser.token);
        parser.token++;

        // Expresión
        Node expr = new Node("expresión for",parser.token);
        parser.token++;

        Node id=new Node("id",parser.token);
        parser.token++;
        id.addHijo(ide.toString(),parser.token);
        parser.token++;

        Node num1=new Node("Id",parser.token);
        parser.token++;
        num1.addHijo(""+l,parser.token);
        parser.token++;

        Node num2=new Node("Integer",parser.token);
        parser.token++;
        num2.addHijo(""+h,parser.token);
        parser.token++;

        expr.addHijo(id);
        expr.addHijo(num1);
        expr.addHijo(num2);
        ciclo.addHijo(expr);
        ciclo.addHijo((Node)b);

        RESULT= ciclo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOFOR",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BODY ::= PROPOSITION BODY 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node BODYn = new Node("BODY",  parser.token);
        parser.token++;
        BODYn.addHijo((Node) p);
        
        if(b!=null){
            BODYn.addHijos(((Node)b).getHijos());
        }

        RESULT = BODYn;
                

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BODY ::= 
            {
              Object RESULT =null;
		
    Node node=new Node("Body Vacío",parser.token);
    parser.token++;
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BODY ::= error PROPOSITION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PROPOSITION ::= While EXPRESION_BOOLEAN loop BODY end loop PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    Node node = new Node("declaración ciclo while",parser.token);
    parser.token++;

    Node whil=new Node("while",parser.token);
    parser.token++;
    node.addHijo(whil);

    node.addHijo((Node)e);

    node.addHijo((Node)b);

    RESULT= node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSITION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PROPOSITION ::= CICLOFOR 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT = (Node)cf;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSITION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PROPOSITION ::= CICLOLOOP 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT = (Node)cl;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSITION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PROPOSITION ::= ASIGNACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT = (Node)a;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSITION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PROPOSITION ::= ASIGNAREXPREION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT = (Node)a;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSITION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PROPOSITION ::= LLAMADA_F PuntoComa 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    RESULT=lf;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSITION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PROPOSITION ::= IFSTATE 
            {
              Object RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ife = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT = ife;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSITION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PROPOSITION ::= PUT 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT=p;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSITION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PROPOSITION ::= GET 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT=g;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSITION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PROPOSITION ::= Return RETORNO PuntoComa 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node node = new Node("Return",parser.token);
    parser.token++;

    node.addHijo((Node)r);

    RESULT = node; 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSITION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PROPOSITION ::= Exit When EXPRESION_BOOLEAN PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node node = new Node("Exit when",parser.token);
    parser.token++;

    node.addHijo((Node)e);

    RESULT = node; 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSITION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RETORNO ::= Boolean 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node valor = new Node(""+b,parser.token);
    parser.token++;

    RESULT = valor; 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETORNO ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node ret = new Node("Return de id",parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    id.addHijo(i.toString(),parser.token);
    parser.token++;

    RESULT = ret; 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETORNO ::= LLAMADA_F 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT = (Node)lf;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETORNO ::= 
            {
              Object RESULT =null;
		

    Node valor = new Node("Return vacio",parser.token);
    parser.token++;

    RESULT = valor; 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // GLOBAL_PROPS ::= DECLARACION_SIMPLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT = (Node)d;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBAL_PROPS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // GLOBAL_PROPS ::= DECLARACION_ASIGNACION 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT = (Node)da;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBAL_PROPS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // GLOBAL_PROPS ::= DECLARACION_EXPRESION 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT = (Node)da;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBAL_PROPS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // GLOBAL_PROPS ::= FUNC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    System.out.println("Declaracion de funciones");
    RESULT = (Node)f;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBAL_PROPS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // GLOBAL_PROPS ::= PROCEDURE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    System.out.println("Declaracion de procedimiento");
    RESULT = (Node)p;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBAL_PROPS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PROP_LIST ::= GLOBAL_PROPS PROP_LIST 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
    Node node = new Node("lista de proposiciones", parser.token);
    System.out.println("Prop :v");
    // parser.token++;
    // Añadir la proposición
    node.addHijo((Node)d);
    if(pl!=null) node.addHijos(((Node)pl).getHijos() );                      
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP_LIST",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PROP_LIST ::= 
            {
              Object RESULT =null;
		/*Vacío*/
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP_LIST",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // GLOBAL_START ::= PROP_LIST 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node BODY=new Node("GLOBAL",parser.token);
    parser.token++;

    if(pl!=null){
        BODY.addHijos(((Node)pl).getHijos());
    }

    RESULT= BODY;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBAL_START",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // GLOBAL_START ::= error PROP_LIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBAL_START",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TYPE ::= TypeBoolean 
            {
              Object RESULT =null;
		
    Node nodo = new Node("TypeBoolean",  parser.token);
    parser.token++;
    RESULT = nodo;
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TYPE ::= TypeInteger 
            {
              Object RESULT =null;
		
    Node nodo = new Node("TypeInteger",  parser.token);
    parser.token++;
    RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TYPE ::= TypeFloat 
            {
              Object RESULT =null;
		
    Node nodo = new Node("TypeFloat",  parser.token);
    parser.token++;
    RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= in 
            {
              Object RESULT =null;
		
    Node nodo = new Node("In",  parser.token);
    parser.token++;
    RESULT = nodo;
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= out 
            {
              Object RESULT =null;
		
    Node nodo = new Node("Out",  parser.token);
    parser.token++;
    RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= in out 
            {
              Object RESULT =null;
		
    Node nodo = new Node("In Out",  parser.token);
    parser.token++;
    RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO ::= 
            {
              Object RESULT =null;
		
    Node nodo = new Node("Sin In o Out",  parser.token);
    parser.token++;
    RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DATA ::= Boolean 
            {
              Object RESULT =null;
		
    Node nodo = new Node("boolean",  parser.token);
    parser.token++;
    RESULT = nodo;
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DATA ::= Integer 
            {
              Object RESULT =null;
		
    Node nodo = new Node("integer",  parser.token);
    parser.token++;
    RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DATA ::= Float 
            {
              Object RESULT =null;
		
    Node nodo = new Node("float",  parser.token);
    parser.token++;
    RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION_SIMPLE ::= TERMINO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
    RESULT=t;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_SIMPLE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION_SIMPLE ::= SIGNO TERMINO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT=(Node)t;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_SIMPLE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION_SIMPLE ::= EXPRESION_SIMPLE OperadorSuma TERMINO 
            {
              Object RESULT =null;
		int exsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object exs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("expresión simple",parser.token);
    parser.token++;

    if(exs!=null){
        node.addHijos(((Node)exs).getHijos());
    }
    Node opea_sum=new Node("operador suma/resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;
    node.addHijo(opea_sum);
    node.addHijo((Node)t);
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_SIMPLE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SIGNO ::= OperadorSuma 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node= new Node("Signo",parser.token);
    parser.token++;

    Node opea_sum=new Node("Operacion Suma/Resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;

    node.addHijo(opea_sum);

    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIGNO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT=f;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TERMINO ::= TERMINO OperadorMultiplicacion FACTOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node =new Node("termino",parser.token);
    parser.token++;
    if(t!=null){
        node.addHijos(((Node)t).getHijos());    
    }
    Node opea_mult=new Node("operador multiplicacion/division",parser.token);
    parser.token++;

    opea_mult.addHijo(op.toString(),parser.token++);
    parser.token++;

    node.addHijo(opea_mult);

    node.addHijo((Node)f);

    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FACTOR ::= Id 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("factor",parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);

    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FACTOR ::= Id AbrirParentesis LIST_EXPRESION CerrarParentesis 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node node=new Node("factor",parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
    

    node.addHijo((Node)list);
   
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FACTOR ::= VALORES 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT=v;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FACTOR ::= AbrirParentesis EXPRESION CerrarParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node node=new Node("factor",parser.token);
    parser.token++;
    node.addHijo((Node)e);
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FACTOR ::= not FACTOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("factor",parser.token);
    parser.token++;

    Node not=new Node("Not",parser.token);
    parser.token++;
    not.addHijo(n.toString(),parser.token);

    if(f!=null){
        node.addHijos(((Node)f).getHijos());
    }

    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALORES ::= Integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("int",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;

    node.addHijo(valor);

    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALORES ::= Boolean 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("bool",parser.token);
    parser.token++;
    Node valor = new Node(""+b,parser.token);
    parser.token++;
    
    node.addHijo(valor);

    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALORES ::= Float 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("float",parser.token);
    parser.token++;
    Node valor = new Node(""+l,parser.token);
    parser.token++;
    
    node.addHijo(valor);

    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION_SIMPLE 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT=es;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION_SIMPLE OperadorRelacional EXPRESION 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node =new Node("expresión simple",parser.token);
    parser.token++;
    node.addHijo((Node)es);

    node.addHijo(op.toString(),parser.token);
    parser.token++;

    if(ex!=null){
        node.addHijos(((Node)ex).getHijos());
    }
    
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= ERROR 
            {
              Object RESULT =null;
		
    Node error=new Node("error expresión",parser.token);
    parser.token++;

    RESULT=error;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LIST_EXPRESION ::= EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("Lista de Expresiones",parser.token);
    parser.token++;
    node.addHijo((Node)e);

    RESULT=e;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIST_EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LIST_EXPRESION ::= LIST_EXPRESION coma EXPRESION 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("Lista de Expresiones",parser.token);
    parser.token++;

    if(list!=null){
        node.addHijos(((Node)list).getHijos());
    }
    Node coma=new Node(",",parser.token);
    parser.token++;
    node.addHijo(coma);

    node.addHijo((Node)e);
    
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIST_EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION_BOOLEAN ::= T_EXPRESION_BOOLEAN P_EXPRESION_BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node expr = new Node("expresión", parser.token++);
    parser.token++;
    expr.addHijos(((Node)t).getHijos() );
    expr.addHijo((Node)p);
    RESULT = expr;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // P_EXPRESION_BOOLEAN ::= or T_EXPRESION_BOOLEAN P_EXPRESION_BOOLEAN 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node expr = new Node(o.toString(), parser.token++);
    parser.token++;
    expr.addHijos( ((Node)t).getHijos() );
    expr.addHijo((Node)p);
    RESULT = expr;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P_EXPRESION_BOOLEAN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // P_EXPRESION_BOOLEAN ::= 
            {
              Object RESULT =null;
		
    Node node =  new Node("#", parser.token++);
    parser.token++;
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P_EXPRESION_BOOLEAN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // T_EXPRESION_BOOLEAN ::= F_EXPRESION_BOOLEAN D_EXPRESION_BOOLEAN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node expr = new Node("T", parser.token++);
    parser.token++;
    expr.addHijo((Node)f);
    expr.addHijo((Node)d);
    RESULT = expr;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_EXPRESION_BOOLEAN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // D_EXPRESION_BOOLEAN ::= and F_EXPRESION_BOOLEAN D_EXPRESION_BOOLEAN 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node expr = new Node(o.toString(), parser.token++);
    parser.token++;
    expr.addHijo((Node)f);
    expr.addHijo((Node)d);
    RESULT = expr;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_EXPRESION_BOOLEAN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // D_EXPRESION_BOOLEAN ::= OperadorRelacional F_EXPRESION_BOOLEAN D_EXPRESION_BOOLEAN 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node expr = new Node(o.toString(), parser.token++);
    parser.token++;
    expr.addHijo((Node)f);
    expr.addHijo((Node)d);
    RESULT = expr;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_EXPRESION_BOOLEAN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // D_EXPRESION_BOOLEAN ::= 
            {
              Object RESULT =null;
		
    Node node =  new Node("#", parser.token++);
    parser.token++;
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_EXPRESION_BOOLEAN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // F_EXPRESION_BOOLEAN ::= Boolean 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("Boolean",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F_EXPRESION_BOOLEAN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // F_EXPRESION_BOOLEAN ::= Integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("Integer",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F_EXPRESION_BOOLEAN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // F_EXPRESION_BOOLEAN ::= Float 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("Float",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F_EXPRESION_BOOLEAN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // F_EXPRESION_BOOLEAN ::= Id 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("id",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F_EXPRESION_BOOLEAN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // F_EXPRESION_BOOLEAN ::= AbrirParentesis EXPRESION_BOOLEAN CerrarParentesis 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    RESULT = (Node)f;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F_EXPRESION_BOOLEAN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NODE_EXPRESION ::= T_EXPRESION P_EXPRESION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node expr = new Node("expresión", parser.token++);
    parser.token++;
    expr.addHijos( ((Node)t).getHijos() );
    expr.addHijo((Node)p);
    RESULT = expr;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NODE_EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // P_EXPRESION ::= OperadorSuma T_EXPRESION P_EXPRESION 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node expr = new Node(o.toString(), parser.token++);
    parser.token++;
    expr.addHijos( ((Node)t).getHijos() );
    expr.addHijo((Node)p);
    RESULT = expr;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P_EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // P_EXPRESION ::= 
            {
              Object RESULT =null;
		
    Node node =  new Node("#", parser.token++);
    parser.token++;
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P_EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // T_EXPRESION ::= F_EXPRESION D_EXPRESION 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node expr = new Node("T", parser.token++);
    parser.token++;
    expr.addHijo((Node)f);
    expr.addHijo((Node)d);
    RESULT = expr;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // D_EXPRESION ::= OperadorMultiplicacion F_EXPRESION D_EXPRESION 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node expr = new Node(o.toString(), parser.token++);
    parser.token++;
    expr.addHijo((Node)f);
    expr.addHijo((Node)d);
    RESULT = expr;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // D_EXPRESION ::= 
            {
              Object RESULT =null;
		
    Node node =  new Node("#", parser.token++);
    parser.token++;
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // F_EXPRESION ::= Integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("Integer",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F_EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // F_EXPRESION ::= Float 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("Float",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F_EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // F_EXPRESION ::= Id 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node node=new Node("id",parser.token);
    parser.token++;
    Node valor = new Node(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F_EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // F_EXPRESION ::= AbrirParentesis NODE_EXPRESION CerrarParentesis 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    RESULT = (Node)f;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F_EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PUT ::= Put AbrirParentesis Id CerrarParentesis PuntoComa 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node node=new Node("PUT",parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUT",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PUT ::= Put AbrirParentesis VALORES CerrarParentesis PuntoComa 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node node=new Node("PUT",parser.token);
    parser.token++;

    node.addHijo((Node)v);
 
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUT",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PUT ::= Put_Line AbrirParentesis Id CerrarParentesis PuntoComa 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node node=new Node("PUT_LINE",parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUT",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PUT ::= Put_Line AbrirParentesis VALORES CerrarParentesis PuntoComa 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node node=new Node("PUT_LINE",parser.token);
    parser.token++;

    node.addHijo((Node)v);

    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUT",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // GET ::= Get AbrirParentesis Id CerrarParentesis PuntoComa 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node node=new Node("GET",parser.token);
    parser.token++;

    Node id=new Node("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    RESULT=node;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GET",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
